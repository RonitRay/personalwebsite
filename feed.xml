<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
<channel><!--  RSS generated by ecstatic, a minimal static site generator  --><title>Ronit Ray's Blog</title>
<link>https://ronitray.xyz/</link>
<description>Feed for Ronit Ray's personal blog</description>
<lastBuildDate>Mon, 2021-07-12</lastBuildDate>
<item>
<title>Building a Sustainable Personal Wiki for Free</title>
<link>https://ronitray.xyz/posts/personal-wiki.html</link>
<pubDate>Sun, 11 Jul 2021</pubDate>
<description>I like the idea of a personal wiki, but everything is expensive, over-engineered, or likely to disappear within 5 years. Here's how I navigate through this.</description>
<content:encoded><![CDATA[<p>Order is beautiful. My mind is an absolute mess, and the idea of offloading some of it into a structured place that I may never revisit, but can if I want to, is extremely appealing to me at the moment. I've also greatly been inspired by incredible public archives like <a href="https://wiki.nikitavoloboev.xyz/">Nikita Voloboev's</a> and <a href="https://rasulkireev.com/brain/">Rasul Kireev's</a>. I think they're incredible and would very much like to build a personal repository that will outlive me and might bring value to someone after I'm gone. This is why I've been thinking about having a knowledge base/personal wiki for a while.</p>

<p>Personal wikis aren't exactly new, they've been around for as long as the web has, if not longer. However, my understanding is that fancy new tools like Notion, Roam, Obsidian etc. have caused a giant uptick in adoption for this habit over the last couple of years. It's hard to navigate YouTube without finding productivity channels talking about their "life OS" or "second brain" built on top of Notion nowadays. And I'm all for it.</p>

<h3>I don't want to use Notion, though.</h3>

<p>It's not that it isn't good, it's pretty great and people who call it a glorified text editor will have to jump through many hoops to name something that brings in the stuff that Notion does on top of basic Markdown. That said, I don't need most of those things, <a href="https://ronitray.xyz/posts/notes-workflow">plain text is perfectly good for me</a>. </p>

<p>Notion is free for personal use now, pretty good looking, easy to use, extensible, and all the other things their marketing department and army of promoters can tell you. That said, I just don't feel like it is for me. <a href="https://www.notion.so/Terms-and-Privacy-28ffdd083dc3473e9c2da6ec011b58ac">Their TOS and Privacy Policy</a> are pretty transparent about the fact that privacy isn't exactly their priority. That's fine, it's their prerogative to prioritize functionality and the ability to make the platform free for so many users. It's just a trade-off I am not willing to make. </p>

<p>Further, because Notion adds a whole lot of functionality over basic text or rich(er) text like Markdown, it's all too easy to get tied down and locked into the platform. To their credit, they allow <a href="https://www.notion.so/Back-up-your-data-1a8eb5bdfce34d19a6360fd015c0075f">export to HTML, Markdown, or PDF</a>, but you would lose out on the fancy bits that aren't directly compatible. You could just not use them and maintain a discipline to treat it as just a plaintext platform, but it's not easy to resist the charm, especially when it may actually be easier to use some of it than have to work around the limitations of just text files. </p>

<p>The other problem here is that it seems their export functionality doesn't work very well. As seen in <a href="https://news.ycombinator.com/item?id=27612894">this HN post</a> and the <a href="https://news.ycombinator.com/item?id=27613632">follow-up from Notion's CEO</a>, their export feature doesn't work at scale. And a personal wiki is likely to scale pretty quickly if you're diligently adding entries to it over a few years. I don't want to be locked in. I don't want to be reliant on a completely online service to have to do something as simple as writing. And I don't want to have to trust some random company to store my data or to <em>not</em> do something not to my taste or outright malicious with it.</p>

<p>So where do I go?</p>

<h3>My requirements</h3>

<p>I'm not very picky, but here's what I need.</p>

<ol>
<li>Free (libre), as in beer: I'm not above paying for something that brings great utility to my life and work, but I'm strapped for cash at the moment, and I would much rather use something that provides 90% of the utility for free than something else which offers spit and polish and marginal extra utility for a subscription or a lump sum price.</li>
<li>Preferably free, as in freedom: I like free software. I like what it stands for, I like what it can be and I like what the world could be if it was the default. I may not be qualified or interested in reading, understanding, and auditing the code for every FOSS tool that I use, but the social contract of the dev putting it out in the open, and the prospect of a community of which at least a subset might actually be both interested and capable of doing this means, at least in my opinion, that free software will always be superior to proprietary competitors. </li>
<li>Plain text or Markdown support: Plain text stands the test of time. A whole lot of things could render your personal wiki inaccessible or unusable, but Unicode or ASCII going out of fashion or support is highly unlikely, or at least unlikely enough to be a gamble I am willing to take. Even if the tool of choice for viewing, editing, and searching the wiki goes out of support or disappears off the face of the earth, I can read, edit, understand and manipulate plain text just fine.</li>
<li>Sustainable: I should be controlling the data. This boils down to me having access to the files upon which the wiki is built. I should be able to back up, transfer, delete or do whatever I want with these files freely.</li>
<li>Relatively frictionless: I'm just going to be using it less and less if it's slow to start up or involves navigating a bunch of menus every time I have to capture a simple idea. </li>
<li>Preferably cross-platform or easily shareable: I want to be able to edit or at least view the wiki from my phone, or share a relevant page with someone easily.</li>
</ol>

<p>I think this isn't too much to ask for. I've basically been doing this with a folder structure and markdown files for personal notes anyway, but elevating that to a Wiki might take just a little more work.</p>

<h3>My Options</h3>

<p>Let's review some of the popular options in the wikispace and see how they fare against my metrics.</p>

<h4>Notion (3/6)</h4>

<p>Notion isn't really a dedicated personal wiki tool, but it very much finds application there. It actually fared better than I expected. Notion is pretty frictionless (once you get past the trap of continuously optimizing your templates for MAXIMUM PRODUCTIVITY(TM)). It is a web app, so works on anything that is relatively modern. It is now free for personal use, but wasn't always, and there aren't any guarantees that it is always going to be. I've already decided against it so there isn't much more to talk about here.</p>

<p><img src="../img/notion.webp" alt="Screenshot of a personal wiki template for Notion">
[Image courtesy of notionpages.com]</p>

<p><a href="https://notion.so">Check out Notion here!</a></p>

<h4>Obsidian (3.5 to 5/6)</h4>

<p>Obsidian is probably really close to what I want because it is a dedicated knowledge base tool. It's great for privacy and control because it works on a local folder of Markdown files. It has some really beautiful power features and it allows for networked/linked visualization that is attractive and probably very useful too. However, it is proprietary software, and costs $8/month/site, soon to become $16/month/site to publish your wiki to the web. Still pretty darn fantastic, I would say.</p>

<p><img src="../img/obsidian.webp" alt="Screenshot of an Obsidian screen">
[Image courtesy of Obsidian's homepage]</p>

<p><a href="https://obsidian.md/">Check out Obsidian here!</a></p>

<h4>MediaWiki (4/6)</h4>

<p>MediaWiki is an incredibly robust piece of software, but it really isn't targeted at projects of a scale as small as my personal wiki. Everything about it screams the fact that it is aiming for large Wikipedia or project wiki style projects, with collaboration and many other great features. It is  completely free software released under GPLv2 and is designed to run on a server I own and maintain myself, so sustainability is a check mark too. My main issues with it are:</p>

<ol>
<li>It's super over-engineered for what I need. I don't need (yet) or want to use a local web server or VPS (it's not really free of cost then, is it?). I don't think my wiki will be of the scale that it will ever need to run on a database.</li>
<li>I'd have to learn their markup which is fine and would probably pay off if I stuck to it, but again it adds to friction.</li>
<li>While the end product is somewhat viewable on any web browser, it is a far cry from responsive. <a href="https://www.mediawiki.org/wiki/Manual:Mobiles,_tablets_and_responsive_design">Their own wiki</a> states that it is not at all optimized for mobile, but there are some workarounds that can make the experience a little more pleasant.</li>
</ol>

<p><img src="../img/mediawiki.webp" alt="Screenshot of the MediaWiki homepage"> </p>

<p>I just don't think it's a good fit for me.</p>

<p><a href="https://www.mediawiki.org/wiki/MediaWiki">Check out MediaWiki here!</a></p>

<h4>TiddlyWiki (4.5/6)</h4>

<p>TiddlyWiki is fantastic. At first glance it ticks every box and should be the only thing I consider, and yet... very few things have boggled my mind as much as trying to understand it. It was incredibly overwhelming to wrap my head around it, and honestly I want something that gets out of my way rather than needing me to understand its intricacies and idiosyncrasies for a long time before getting any value out of it. Still, the scope of things that seem achievable with it is incredible, and it does seem to be capable of a perfect score if I toughen up and just get past the learning curve. It's a no, but only for now. We may yet have a wonderful time together.</p>

<p><img src="../img/tiddly.webp" alt="Screenshot of a TiddlyWiki page"></p>

<p><a href="https://tiddlywiki.com/">Check out TiddlyWiki here!</a></p>

<h4>Wiki.js (4.5/6)</h4>

<p>It's about the same as MediaWiki in terms of metrics...Please don't make me have to maintain a database and a container and an application and a server/VPS for a pet project just yet.</p>

<p><img src="../img/wikijs.webp" alt="Screenshot of a Wiki.js page"></p>

<p><a href="https://js.wiki/">Check out Wiki.js here!</a></p>

<h4>GitBook (4.25/6)</h4>

<p>GitBook is a SaaS. I'm not too keen on using something that can change the ToS on me. It's still good that it is based on markdown files that are super easy to shift elsewhere, but it's not exactly ideal to be at their mercy. At least with an executable you can use it as long as you have it, or downgrade to an old version if they introduce malicious elements or anti-features. Still, GitBook is one of the prettiest solutions I've seen, and I won't lie and say I'm not tempted.</p>

<p><img src="../img/gitbook.webp" alt="Screenshot of a GitBook page"></p>

<p><a href="https://www.gitbook.com/">Check out GitBook here!</a></p>

<h4>XWiki (5/6)</h4>

<p>Again, very good but not for me. Hosting, database, so on and so forth. XWiki is Java based too, which is a language and platform I am fairly comfortable with. But I'll give it a miss for now.</p>

<p><img src="../img/xwiki.webp" alt="Screenshot of an XWiki page"></p>

<p><a href="https://www.xwiki.org/xwiki/bin/view/Main/WebHome">Check out XWiki here!</a></p>

<h4>DokuWiki (5/6)</h4>

<p>This is another piece of software that really, really impressed me. Short of the fact that I don't want to self-host, it demolishes all of my criteria with flying colours. It's simple and seemingly great to use and navigate around. I had a great feeling reading their docs and can confidently say that if my present solution is ever inadequate and I find myself moving to a hosted solution, DokuWiki will most likely be at the top of my list of options to switch to, even ahead of TiddlyWiki due to sheer simplicity. Easily the best candidate so far, but I'm tempted to explore a little bit more before I consider coughing up the money for a cheap VPS.</p>

<p><img src="../img/dokuwiki.webp" alt="Screenshot of a DokuWiki page"></p>

<p><a href="https://www.dokuwiki.org/dokuwiki">Check out Dokuwiki here!</a></p>

<h4>Docusaurus and other static site generator-based solutions (5.5/6)</h4>

<p>Docusaurus is a static site generator based on React, geared to churn out documentation-style webpages quickly. It's pretty good, I've toyed with it at work, but even the few commands here and there add to the friction for me. You can find documentation-style templates for any static generator of your choice. My own site is on a static site generator, and for the few posts a month I think it's perfectly fine. But I expect to use and update my wiki more than that. Still, very solid.</p>

<p><img src="../img/docusaurus.webp" alt="Algolia's DocSearch, built with Docusaurus"></p>

<p><a href="https://docusaurus.io/">Check out Docusaurus here!</a></p>

<p><a href="https://themes.gohugo.io/tags/docs/">Check out Hugo documentation templates here!</a></p>

<p><a href="https://jekyllthemes.io/jekyll-documentation-themes">Check out Jekyll documentation templates here!</a></p>

<h4>Org-Mode (5/6)</h4>

<p>I'm not an emacs user. That alone is disqualifying for org mode, I think. I have been exposed to some great demonstrations on org-mode <a href="https://www.youtube.com/watch?v=oJTwQvgfgMM">1</a> <a href="https://www.youtube.com/watch?v=Ea_-TaEGa7Y">2</a> <a href="https://www.youtube.com/watch?v=SzA2YODtgK4">3</a>, so I have no illusions about the fact that it is an incredible tool. I actually spent a couple of months in emacs too, and enjoyed it. Part of this period was spent moving over my small notes database (poor choice of words, it was basically a bunch of text files) to org mode. While I enjoyed it, there was too much of it that I felt I didn't understand and had to memorize, and a whole lot of untapped potential as is the case with emacs in general. I've never been exposed to Lisp, and don't have the time or, at the moment, the inclination to learn elisp to get things to work the way I want. For this reason I almost gave negative points to org mode in terms of "friction", but settled on a 0. In another life, or perhaps in a few years... who knows.</p>

<p><img src="../img/orgmode.webp" alt="A screenshot of org-wiki for org-mode in Emacs"></p>

<p><a href="https://orgmode.org/">Check out Org-Mode here!</a></p>

<h4>VimWiki (4/6)</h4>

<p>VimWiki is a newer project that aims to bring some of the org-mode like functionality to Vim, and it's pretty good. I'm much more comfortable with vim, so I considered this seriously for a while. There are some issues, though.</p>

<ol>
<li>The markup is kind of messed up. I'd have to learn it and use it for wiki entries while simultaneously using Markdown for writing posts on my site for example.</li>
<li>The file structure sucks. At least when I used it, no matter the level of nesting of a particular document, everything was dumped in the root folder. Doesn't bode well if I have to move away from VimWiki in the future.</li>
</ol>

<p>It does have an (albeit rudimentary) export to HTML feature, which is not bad for shareability. But I was left underwhelmed by it.</p>

<p><img src="../img/vimwiki.webp" alt="A screenshot of VimWiki"></p>

<p><a href="https://vimwiki.github.io/">Check out VimWiki here!</a></p>

<h4>Zim (6/6) WINNER WINNER!</h4>

<p>I did it, I found it! And it is beautiful.</p>

<p>My first exposure to Zim was a few years ago in <a href="https://www.youtube.com/watch?v=HFeW4Cj5k1s">Average Linux User's video about note-taking programs on Linux</a>. At the time it was a little at loggerheads with what I was looking for; I still maintain a different notes workflow because I want the private stuff to be encrypted and synced but not using a SaaS, and preferably not over the internet at all. However, it seems absolutely perfect for my wiki requirement.</p>

<p><img src="../img/zim.webp" alt="A Zim wiki demo image"></p>

<p>Zim is a remarkable little graphical editor that allows for hierarchical text/hybrid document storage. It's available on every major desktop platform, looks fair enough and is easy to get into. Even beyond the surface simplicity that is so attractive, there's a good deal of features that "power users" might want to make use of from time to time. </p>

<p><a href="https://zim-wiki.org/">Show some love for Zim here.</a></p>

<p>What I love:</p>

<ol>
<li>It's just simple.</li>
<li>The WYSIWYG editor is pretty great, but it also supports Markdown and standard keybindings for bold, underline etc.</li>
<li>The folder and file structure is sane.</li>
<li>It isn't usable directly on phone, but there's nothing stopping me from syncing the folder using Syncthing and then editing the files using an editor of my choice.</li>
<li>HTML export is there and it works great! It's pretty quick and simple, and while the default formatting is not responsive, it supports external templates. There are a <a href="https://github.com/jaap-karssenberg/zim-wiki/wiki/Templates">handful of templates available already</a>. I've decided to use the <a href="https://github.com/jrm4/Eight-Five-Zero">Eight-Five-Zero</a> theme, but have removed useless (according to me) jQuery stuff, added a CSS rule to make code blocks play well with smaller screens, and fixed an issue with line height that I explained in some detail in <a href="https://ronitray.xyz/posts/line-height-units-css">this post</a>.
<ol>
<li>Yes, the templating language is really simple, and you can just wrap it with good old HTML! <a href="https://github.com/RonitRay/Zim-Wiki-Template-850">Here's a link to my template</a></li>
<li>Zim goes so far as to generate an index for all my content, which is just wonderful.</li>
</ol></li>
</ol>

<p>What I don't love:</p>

<p>What's not to love? Zim is superb and everything I asked, and potentially could ever ask for. The only thing I can think might be a shortcoming compared to other items listed here is the fact that the web output cannot be searched, but the caveat is that it is served as static HTML that is simpler and much faster. I think I can take that deal. Besides, the actual tool has full-text search in it, it's just the web output which doesn't.</p>

<h3>The Result</h3>

<p>I'm pleased to announce that I've started my wiki on Zim, and I'm really delighted so far. It works great for my use case. </p>

<p><a href="https://wiki.ronitray.xyz/">My Personal Wiki!!</a></p>

<p><img src="../img/wikiscreen.webp" alt="Screenshot of my wiki index."></p>

<p>It's pretty scanty now, but I'm hoping to make good use of it in the days and years to come. Overall, I'm really pleased with my workflow and the result.</p>

<h3>What I Learned</h3>

<p>It's still early days, so I don't know if maintaining an extensive and well-documented wiki is something that I will take to. That said, I'm rather excited about it. I've been very pleasantly surprised with the variety of options available to me. If one thing has impressed me so far in my search, it is how many of these are free and open-source. It's a solid refutation of the narrative that you need proprietary or commercial tools to get a job done well, and gives me a lot of hope. I am taking away this hope along with the confidence that I have no dearth of options to switch to if the present arrangement doesn't work out, and the expectation to be able to build the discipline and make something that is not just useful to me, but might also serve as a long-lasting repository of conventional and unconventional knowledge, available to anyone willing to seek it out. Until next time!</p>
]]></content:encoded>
</item>
<item>
<title>Supercharging StackOverflow for Productivity (and Profit?)</title>
<link>https://ronitray.xyz/posts/stackoverflow-faster.html</link>
<pubDate>Mon, 07 Jun 2021</pubDate>
<description>How to use content blockers to make StackOverflow load insanely fast.</description>
<content:encoded><![CDATA[<p>StackOverflow is a blessing. It's a career maker and a career saver for almost every software engineer I know, myself included. That said, it can be better.</p>

<p><img src='https://ronitray.xyz/img/good-better.webp' alt='Pedro Pascal&#39;s character in Wonder Woman 1984, Maxwell Lord, saying StackOverflow is Good... But it can be Better!'/></p>

<p>The vast majority of StackOverflow usage at work, at least for me, is looking for solutions that exist already. I don't need the account features (it has been months since I've logged in). I land on the question's page from my search engine, and bounce when I am done. I am only concerned with the content of the question and the proposed solutions, and perhaps any similar questions that might be relevant. Along with these, however, this is everything a StackOverflow page presents:</p>

<ol>
<li>A header with a search box I don't use, and links to 'About', 'Products', 'For Teams' and account-related actions.</li>
<li>A form to answer the question.</li>
<li>A link to the developer survey.</li>
<li>A footer with a whole lot of other stuff.</li>
<li>Cookie pop-ups.</li>
<li>Another popup at the bottom urging you to join StackOverflow.</li>
<li>An ad for StackOverflow for Teams in the left sidebar.</li>
<li>Options to search for Jobs and Companies in the left sidebar.</li>
<li>Links to the general Questions, Users, and Tags pages in the left sidebar.</li>
<li>Links to posts on the StackOverflow blog.</li>
<li>"Hot network questions" from across the StackExchange forums.</li>
</ol>

<p>The average StackOverflow page looks like this:</p>

<p><img src='https://ronitray.xyz/img/full-stackoverflow.webp' alt='A full StackOverflow page'/></p>

<p>Here's how you can strip away the extraneous elements and keep only the content.</p>

<ol>
<li><p>Install <a href="https://ublockorigin.com/">uBlock Origin</a>. Most people have this installed already. If you don't, what are you waiting for? It makes the web much less hostile.</p>

<p>Aside from its excellent ad and tracker blocking, uBlock Origin has a powerful feature called cosmetic filtering. This allows you to change the appearance of a website at will. You could render a website in a dark theme, or with any CSS of your choosing. Or better, in this case, you will purge (the official term is 'zap') any DOM elements you don't want to see on the page. Here's how.</p></li>
<li><p>After installing uBlock, click on the settings icon <img src='https://ronitray.xyz/img/ublock_settings.png' alt='The icon for settings in uBlock Origin'></p></li>
<li>In the tab that opens, click on My Filters on the top bar.</li>
<li><p>Add the following lines to the text box:</p>

<pre class='codeblock'>! 2021-06-07 https://stackoverflow.com
stackoverflow.com##.top-bar__network.js-top-bar.top-bar
stackoverflow.com##.js-consent-banner.r16.l16.b16.bar-lg.fc-white.bg-black-750.sm\:p16.p32.sm\:w-auto.ws4.z-nav-fixed.ps-fixed.ff-sans
stackoverflow.com##.ps-relative.js-pinned-left-sidebar.left-sidebar
stackoverflow.com##.sm\:as-end.sm\:order-first.sm\:mb12.sm\:ml0.print\:d-none.grid--cell.aside-cta.ml12
stackoverflow.com##.m0.p0.d-block
stackoverflow.com##.tex2jax_ignore.module
stackoverflow.com##.js-dismissable-hero.z-nav.b0.r0.l0.ps-fixed.bc-black-100.bt.bs-sm.bg-black-025
stackoverflow.com##.js-footer.site-footer
stackoverflow.com##.post-form.js-add-answer-component
stackoverflow.com##.bottom-notice
stackoverflow.com##.py2.fs-body2.ff-sans.fc-white.bg-black-700.js-announcement-banner
</pre></li>
<li><p>Click on 'Apply Changes', close the tab and try opening any StackOverflow page.</p></li>
</ol>

<p>This is the result:
<img src='https://ronitray.xyz/img/clean-stackoverflow.webp' alt='The new, improved, cleaner StackOverflow page'/></p>

<p>It is much cleaner, shows only the relevant information and offers no distractions whatsoever. Troubleshooting your code has never been more pleasurable.</p>
]]></content:encoded>
</item>
<item>
<title>Lancelot- My Brainchild (a short story I wrote 10 years ago)</title>
<link>https://ronitray.xyz/posts/lancelot.html</link>
<pubDate>Thu, 13 May 2021</pubDate>
<description>You know, I'm somewhat of a writer myself. Not.</description>
<content:encoded><![CDATA[<p><em>Quick note: While rummaging through some old boxes, I found a notebook from years ago. In it, among a host of other terrible essays, was this little short story that I had written when I was maybe 11 or 12 years old. I'm putting it up here as a bit of fun, and for archival purposes. I don't even want to begin to get into the technical and factual inaccuracies or the ridiculous prose, but reader, if you find yourself wondering "what a fucking sociopath this kid is", know that you're not alone.</em></p>

<hr />

<p>Finally! I had done it. After a year of loose ends, syntax errors, and broken circuits, I had finally developed my own robot!</p>

<p>Proud isn't quite the word to describe how I felt for my robot, having built it from scratch using e-waste meticulously collected from my neighbors. What really clinched it for me, however, was that I had not programmed him in any conventional programming language. C? Java? None of that. This bad boy was powered by LIMBO, a stable, secure and clean language that was easier on the eye and the silicon than any clunky old platform.</p>

<p>I had decided to call my robot Lancelot, after the bravest of the Knights of the Round Table. The brains that came with this beauty were actually the integrated circuitry and 32-bit architecture of my dear Acer TravelMate 2310 laptop. One year. After one entire year, I managed to pupt the last piece in place. Was it really done?</p>

<p>I flicked Lancelot's "ON" switch, and to my surprise and delight, he immediately burst to life!</p>

<pre><code>"Hello, master. Lancelot is at your service."
</code></pre>

<p>Finally. I had tried to fit in with my fellow humans for years, but instead of friendship, compassion, and support, I received ridicule and pain. Society was never quite tolerant towards me, a textbook genius with a 180 IQ, but can you really blame them? Thankfully, my days of begging for companionship were at an end. Lancelot was now here. My best friend, my creation, my vision.</p>

<p>There was nothing Lancelot couldn't do. Remotely controlling all electronic devices in the house, to cooking and multiplayer gaming, the state of the art mutation algorithm I'd baked in allowed hhim to learn anything under the sun. Siri? Take a back seat. Lancelot's natural understanding of commands was second to none, and he could hold conversation in 20 different languages just by spending a day online. I'd shout out whatever I want, and see them materialize right before my eyes.</p>

<p>Life was so good. I felt like Asimov and Clarke too had been waiting for this day, counting down to it in books that had been my companions when no one else would. Even though my paranoid mother initially was scared of Lance, she soon began to understand the value he added to all our lives, especially mine. Lancelot was officially a member of the family.</p>

<p>Until one fateful day. I remember it like it was yesterday. On the 12th of June, 2024, I was woken, not by the chirpy computerized voice I was so used to hearing, but by screams I didn't immediately recognize. I ran out to discover Mrs. Sinha, our next-door neighbor, in a fit of tears, screaming herself hoarse. On my asking what happened, she snapped at me viciously, "GET AWAY from me, and if you or that... MONSTER you have created ever touch my child again, I WILL REPORT YOU TO THE POLICE!" I then noticed that her son had six long scratches across his back. He had lost a lot of blood...Lance? Yes, I had given him six fingers. But why?</p>

<p>Shocked, I shouted, "LANCELOT! REPORT HERE IMMEDIATELY". There he was, in an instant. </p>

<pre><code>"Yes, sir?"
</code></pre>

<p>"Did you touch Balram Sinha?"</p>

<pre><code>"I did what was necessary."
</code></pre>

<p>"What was necessary?"</p>

<pre><code>"Yes."
</code></pre>

<p>"What on earth do you mean?"</p>

<pre><code>"They hurt you, and they are inferior. Must cleanse the earth of lesser beings."
</code></pre>

<p>And he spun over into the kitchen, leaving me sitting in shock.</p>

<p>It has been a week since then, perhaps the worst of my life. Four dogs in our neighborhood were found dead, with similar marks on their bodies. Lance would go missing for hours on end, and return stained with blood. Afraid of what my parents might do if they found out, I had to sneak him into the yard and hose him down, listening to his unhinged "cleanse the earth to make a better world for you and me" rants get worse every single day.</p>

<p>He left me no choice. But how could I? Had I unknowingly programmed my hate, my revulsion into him? Or was this what the world truly was? I had never stopped to care about others for a second, but I had always thought I wouldn't need to. I would leave them alone, the way they had left me. And live would go on. Lance's escapades make me question this mindset every single day. Really, though, how could I? Not only had I programmed him to be unhackable, his time alive and connected to the cyberspace meant he was now more advanced than I could ever make him. A remote power-off was out of the question. My parents weren't as stupid as I imagined either, and neither were the neighbors. My choice was clear- I had to betray the only thing I have ever loved.</p>

<p>It was final, then. i took him to my room, and before he could say a thing, I bashed in the circuitry I had spent so long collecting, integrating, soldering and programming. He didn't suspect me for a second; although his intelligence was unbound, his faith in me was unwavering. Lancelot was gone forever.</p>

<p>Tears come to my eyes even as I recount it now. Knowing I'm returning to an empty home, friendless again. My father's view was "good riddance to bad rubbish". He never did approve, but maybe his casual indifference was better than my uncritical excitement. I turn the doorknob, and hear a weird buzz from my workbench across the room.</p>

<p>Lancelot's severed head, which I was quite sure I had left at the dumpster, buzzed to life.</p>

<pre><code>"Did you miss me?"
</code></pre>
]]></content:encoded>
</item>
<item>
<title>GoatCounter- Simple, Tracking-Free Analytics</title>
<link>https://ronitray.xyz/posts/goatcounter.html</link>
<pubDate>Sun, 09 May 2021</pubDate>
<description>Basic analytics, without any reliance on money-hungry ad networks, and without any tracking or privacy encroachment.</description>
<content:encoded><![CDATA[<p>I like the idea of analytics. I don't think it's a bad thing to know which posts of yours are getting traction, what your readers would like to read, and so on. I am, however, staunchly pro-privacy. I will not stand for any analytics or telemetry: </p>

<ol>
<li>whose purpose goes beyond introspection</li>
<li>which is used for collecting personally identifiable information</li>
<li>which is used to profile users</li>
<li>which is used to drive ad networks or sell collected data</li>
<li>which is heavy and increases the size (and therefore the loading time) of a website.</li>
</ol>

<p>This, for obvious reasons, rules out the likes of some of the most popular analytics tools like Google and Facebook Analytics. I like the idea of analytics, but refuse to sell my soul or the visitors on my website for it. Thankfully, I don't have to.</p>

<p><a href="https://goatcounter.com/">GoatCounter</a> is a great minimal, <a href="https://github.com/zgoat/goatcounter/">open-source</a> web analytics tool. It collects a minimal amount of data and does not link it to identities of users in any way. One of their <a href="https://www.goatcounter.com/why">stated goals</a> is to <em>just “count events” rather than “get as much data as technically possible”</em> which works for me.</p>

<p>Like Google Analytics and many top providers, GoatCounter can be integrated with your site using a single line of JavaScript. This adds about 3.5kB of extra data to every page, which is fairly small. However, one of <a href="https://ronitray.xyz/posts/site-look">my own stated goals</a> for this site was to completely forgo JavaScript, or at least hold off on using it unless absolutely necessary. I don't believe analytics is a good enough reason to serve JavaScript, and would perhaps have reconsidered using Goat if that was the only option. Thankfully, it is not. They allow:</p>

<ol>
<li>Sending data from server logfiles- A viable option if you are self-hosting or using a VPS, but I am not.</li>
<li>API requests from middleware or app backend.</li>
<li>Tracking Pixel- This is what I use. A 1x1 GIF added to every page that works without JavaScript. It is a leaner solution too, since it adds less than 500 bytes (yes, bytes) to each page. That is a 85% load reduction to something that was already a very small size. The way this works is with an image tag:</li>
</ol>

<pre class="codeblock">
<code>&#x3C;img src=&#x22;https://[USERNAME].goatcounter.com/count?p=/[PAGE_NAME]&#x22;&#x3E;</code>
</pre>

<p>Where [USERNAME] is your GoatCounter username and [PAGE_NAME] is the name of your page that will show up on your analytics dashboard.</p>

<p>I want to be very transparent with this, so this is all the data GoatCounter collects for me:</p>

<ol>
<li>User Agent: To see which browser and/or devices people access the site from</li>
<li>Country and Region: Just to get an idea of the demographic makeup of my audience</li>
<li>Session: Only to eliminate duplicate pageviews. The cited example on their site is: <em>Track unique visitors for up to 8 hours; if you disable this then someone pressing e.g. F5 to reload the page will just show as 2 pageviews instead of 1</em></li>
</ol>

<p>If this is still too invasive for you, you are likely using an adblocker of some sort. I have noticed that most ad-blockers (uBlock Origin, Adguard, StevenBlack hosts list etc.) are tuned to block any requests to or content loaded from GoatCounter, so this will not be an issue for you. You can also block this manually using a hosts file, for example.</p>

<p>Also in the interest of full transparency, I am opening up my analytics dashboard to the general public. You get to see all the data that I do, with no exceptions.</p>

<p><a href="https://ronit.goatcounter.com">My GoatCounter Dashboard</a></p>
]]></content:encoded>
</item>
<item>
<title>Let's Build: COVID-19 Vaccination Tracker (for India)</title>
<link>https://ronitray.xyz/posts/covid-vaccine-tracker.html</link>
<pubDate>Wed, 05 May 2021</pubDate>
<description>I grew sick of manually searching for vaccine slots, so I built my own tracker.</description>
<content:encoded><![CDATA[<p>It's that time of the year. Birds are chirping, people are dying, your government has chosen to ignore a massive supply-side vaccine shortage, allowed manufacturers to set their own prices and opened up vaccine bookings for all citizens, thus shifting the onus to get vaccinated entirely upon you... perfectly normal and rather wonderful.</p>

<p>The number of vaccines available in my city is extremely low at the moment. Hospitals declare stocks on the <a href="https://cowin.gov.in/">government portal</a> as they please, and then it is pretty much a game of fastest finger first to grab a booking. There are no notifications, and it takes a while to go from the login page to a page where you can actually make a booking. If traffic is high, this takes longer since the one-time password takes forever to arrive.</p>

<p>At this rate, it would take forever to get vaccinated, and the process of checking for slots a billion times a day was driving me crazy. To their credit, however, the government provides a <a href="https://apisetu.gov.in/public/api/cowin">very simple API</a> for checking vaccine availability. With  a little code smarts, we should be able to knock up a simple tracker to automate the lookup process and give us an alert when a slot is available near us.</p>

<h3>What We Have</h3>

<p>The Co-Win API exposes the following data through REST web services:</p>

<ol>
<li><a href="https://apisetu.gov.in/public/api/cowin#/Metadata%20APIs/states"><strong>A list of Indian states,</strong></a> from which we can grab the state ID we want to query.</li>
<li><a href="https://apisetu.gov.in/public/api/cowin#/Metadata%20APIs/districts"><strong>A list of districts in a particular state,</strong></a> from which we can grab the district ID we want to query. </li>
<li><a href="https://apisetu.gov.in/public/api/cowin#/Appointment%20Availability%20APIs/calendarByDistrict"><strong>A list of vaccination sessions in the next 7 days in a particular district,</strong></a> which is what we need and are going to use.</li>
</ol>

<p>It is worth noting that there is a web service to find vaccination sessions in the next week for a particular pincode, but the shortage is so bad that it's likely there won't be a vaccination center in your pincode for quite a while. You're probably better off driving to a center near you, which is what the above will help us identify.</p>

<h3>What We Are Going to Do</h3>

<p>We will:</p>

<ol>
<li><strong>Query the API at a regular interval</strong>, say every half an hour, to find all slots in the next week.</li>
<li>We filter the results to find slots that are <strong>available</strong>, and <strong>open to our age group</strong></li>
<li>If such an open slot is found, we must <strong>issue an alert</strong> somehow. </li>
</ol>

<p>My demo code will be in Python, but if you have the logic down, it is really easy to adapt to whatever language or framework you are comfortable in. I am a CLI person myself, but you can also extend this into a simple GUI for convenience. Some great projects in this vein are:</p>

<ol>
<li><a href="https://www.vaccinateme.in/covid/?type=district">VaccinateMe</a></li>
<li><a href="https://getjab.in/">GetJab</a></li>
<li><a href="https://findmyslots.com/">FindMySlots</a></li>
</ol>

<p>Hell, I might do so myself... my GitHub is awfully barren. </p>

<p>A small note: the APIs only allow you to find open slots. Any action to actually reserve a vaccination booking for yourself is something you must do manually, as the web services to do so are protected and for authorized (not public) use only.</p>

<p>Less talk, more code.</p>

<h3>Step 1: Inputs</h3>

<p>To query for slots, we need two input parameters:</p>

<ol>
<li>The DISTRICT ID in which we are looking for slots.</li>
<li>The DATE from which we will be looking for slots.</li>
</ol>

<p>We first set up a BASE_DOMAIN for the service URL.</p>

<pre class="codeblock">
<code>BASE_DOMAIN = 'https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict'
</code>
</pre>

<p>Following which, we define the district ID. Remember, there is a web service provided to find the district ID for your district.</p>

<pre class="codeblock">
<code>DISTRICT_ID = '500' 
//pick any from the list
</code>
</pre>

<p>The date is needed in DD-MM-YYYY format as per the API specification. I'm more of an <a href="https://kirby.kevinson.org/blog/iso-8601-the-better-date-format/">ISO-8601</a> man myself, but we can't all be perfect. The standard way to deal with date-time formats is the <a href="https://docs.python.org/3/library/datetime.html">datetime</a> module.</p>

<pre class="codeblock">
<code>import datetime
.
.
.
date = datetime.datetime.now().strftime("%d-%m-%Y") 
//the format expected by the API is DD-MM-YYYY
</code>
</pre>

<h3>Step 2: GET request</h3>

<p>We must now form the URL and send an <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET">HTTP GET</a> request to it to fetch the available slots. Python handles HTTP stuff with the <a href="https://pypi.org/project/requests/">requests</a> library.</p>

<pre class="codeblock">
<code>import requests
.
.
.
url = BASE_DOMAIN + '?' + 'district_id=' + DISTRICT_ID + '&' + 'date=' + today_date

service_response = requests.get(url)
</code>
</pre>

<p>What this does is pretty simple, it sends a GET request to the URL, and whatever response received is stored in the service_response variable.</p>

<p>When dealing with HTTP requests, it's important to account for errors and exceptions. A request that is successfully handled by the server is marked by an HTTP code of <strong>200</strong> in the response. Any code other than that signifies a different type of error (404 is Not Found (maybe the URL was malformed or has changed), 403 is Forbidden (access denied for some reason), 405 is method not allowed (GET expected but POST sent or vice versa) and so on).</p>

<p>Further, there could be other errors in the pipeline. Say your internet connection isn't working- your request will not really go anywhere and your program will be looking for a response that won't arrive. This kind of unexpected behavior is called an Exception and can be handled in python.</p>

<p>The sys module has a number of useful methods to deal with interpreter variables like exceptions. We can handle all exceptions in one fell swoop and also account for HTTP errors like this:</p>

<pre class="codeblock">
<code>
import sys
.
.
.
try:
    service_response = requests.get(url)              
        if service_response.status_code == 200:
            //handle successful response
        else : 
           print("ERROR: " + str(service_response.status_code) + ":" + service_response.text)
except:
    print("Unexpected error:", sys.exc_info()[0] + " at " + str(sys.exc_info()[2]))                 
</code>
</pre>

<h3>Step 3: Handling Response JSON</h3>

<p>The sample response JSON for the calendarByDistrict web service is:</p>

<pre class="codeblock">
<code>{
  "centers": [
    {
      "center_id": 1234,
      "name": "District General Hostpital",
      "name_l": "",
      "address": "45 M G Road",
      "address_l": "",
      "state_name": "Maharashtra",
      "state_name_l": "",
      "district_name": "Satara",
      "district_name_l": "",
      "block_name": "Jaoli",
      "block_name_l": "",
      "pincode": "413608",
      "lat": 28.7,
      "long": 77.1,
      "from": "09:00:00",
      "to": "18:00:00",
      "fee_type": "Free",
      "vaccine_fees": [
        {
          "vaccine": "COVISHIELD",
          "fee": "250"
        }
      ],
      "sessions": [
        {
          "session_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "date": "31-05-2021",
          "available_capacity": 50,
          "min_age_limit": 18,
          "vaccine": "COVISHIELD",
          "slots": [
            "FORENOON",
            "AFTERNOON"
          ]
        }
      ]
    }
  ]
}
</code>
</pre>

<p>The top-level object is an array of <code>center</code> objects. Each center object has specific details like the name, address, type of vaccine, cost etc. The attribute we need is called <code>sessions</code>, and it is an array of objects, each describing the vaccine sessions a center has open in the next week. Each session has the age limit and slots specified.</p>

<p>We get the response JSON and filter it as follows:</p>

<pre class="codeblock">
<code>AGE_BRACKET = 45 //for ages 45-60
found_flag = False //set to true if valid sessions are found
.
.
.
json_body = service_response.json()            
for center in json_body["centers"]:
    sessions = center["sessions"]
    for session in sessions:
        if (session["min_age_limit"] == AGE_BRACKET and session["available_capacity"] > 0):
            found_flag = True
            print("FOUND!!! UwU \n")
            print("on"+ session["date"] + ", Available: " + str(session["available_capacity"]) + "\n")
            print(center["name"] + '\n' + center["address"] + '\n' + session["vaccine"])
            print('\n')
</code>
</pre>

<h3>Step 4: Alert If Valid Slots are Found</h3>

<p>As mentioned earlier, if a slot is found, the system needs to issue an alert so we can go and grab a booking as soon as possible. This can be through an email, a telegram message, changing the color of the RGB lights in your room... the sky is the limit. I'll just be playing  a beep noise thrice for demonstration purposes.
The simplest way to do this is with the <a href="https://pypi.org/project/playsound/">playsound</a> module. This minimalist module has no dependencies and does only one thing- it plays a sound. You can grab a royalty free track of anything online, like a <a href="https://www.soundjay.com/beep-sounds-1.html">beep</a>, and go ham.</p>

<pre class="codeblock">
<code>
from playsound import playsound
.
.
.
if found_flag == True:
    //beep thrice!
    playsound('beep.mp3')
    playsound('beep.mp3')
    playsound('beep.mp3')
else:
    print("not found :( ")
</code>
</pre>

<h3>Step 5: Running this job at regular intervals</h3>

<p>Now that we have a routine to check for available slots, all that is left is automating the process so it runs at a defined interval. Python has a library for literally everything, so it's no surprise that the <a href="https://schedule.readthedocs.io/en/stable/">schedule</a> library is here to save the day.</p>

<p>The first thing you do is to put the entire logic (generating the URL to sending the request, handling the response, and the alert) in a method of its own. This method will be the job that our scheduler runs.</p>

<p>Once this method, say <code>search()</code> is ready, we can schedule it to run at our desired frequency as follows:</p>

<pre class="codeblock">
<code>schedule.every(30).minutes.do(search)

while True:
    schedule.run_pending()
    time.sleep(1)
</code>
</pre>

<p>Remember to be gentle... if you query this too often, the CDN will likely rate-limit you or block you from accessing the API for a while (returning 403 for every request). Aaaand, we're all wrapped up. You can find the complete program on my Github <a href="https://github.com/RonitRay/vaxscene-cli">here</a>.</p>

<h3>A Disclaimer Before We Go</h3>

<p>The idea behind this program is to use publicly available APIs and data provided by the Indian government to expedite the slot booking process and reduce the friction overall. I don't encourage or condone any untoward behavior including abuse of the public APIs, using bots beyond the alert process (eg. for automating bookings and so on) or any other illegal or immoral activity. If any objections are brought forward or if someone brings to my notice that it is wrong to use such a program, I will take the post and the git repository down. I encourage everyone undertaking something like this project to deal in good faith only and ensure we, as a population, do everything in our capacity to get vaccinated as soon as possible and push back against the pandemic.</p>
]]></content:encoded>
</item>
<item>
<title>Don't FLoC with my Heart</title>
<link>https://ronitray.xyz/posts/no-floc.html</link>
<pubDate>Thu, 15 Apr 2021</pubDate>
<description>Google's old wine in a new bottle form of tracking does not interest me. Quite the opposite.</description>
<content:encoded><![CDATA[<p>A couple of weeks ago, Google launched an initiative called <a href="https://blog.google/products/chrome/privacy-sustainability-and-the-importance-of-and/">Federated Learning of Cohorts (FLoC for short)</a> in their Chrome browser. The idea (or the marketing copy, anyway) is that FLoC will allow Google to serve you targeted ads without explicitly releasing identifying data or using third-party cookies. Every website you visit will be used by Google's browser to train their classifiers and put you in buckets called cohorts, and members of each cohort can then be targeted based on their shared interests. Individual users will be "lost in the crowd" and only targeted based on the group they belong to rather than who they are exactly (birds of a feather...FLoC together, if you will). A user is assigned a cohort ID, and any site that requests it is only sent the ID instead of granular data. Google claim that this will allow them to continue serving ads without infringing upon user privacy. </p>

<p>I think it isn't a controversial opinion to say that this is likely preferable over third party cookies, which have been a plague for longer than anyone would like. However, as stated in <a href="https://www.eff.org/deeplinks/2021/03/googles-floc-terrible-idea">this EFF article</a>, it isn't a binary choice. You don't <em>have</em> to choose between "bad" other people tracking and "good" Google tracking. To say that FLoC completely eliminates any scope for malicious surveillance is also incorrect, as displayed theoretically <a href="https://github.com/WICG/floc/issues/100">here</a>, not two weeks after the proposal has come up. Keeping track of a particular user's changing FLoC ID is a fairly trivial server-side operation, and even without other factors, makes for good fingerprinting. </p>

<blockquote>
  <p><a href="https://github.com/WICG/floc/issues/100#issuecomment-819248942">johnwilander's comment:</a></p>
</blockquote>

<blockquote>
  <p><em>To take this to the crowd metaphor: Before the pandemic and some time back, I attended a Mew concert, a Ghost concert, Disney on Ice, and a Def Leppard concert. At each of those events I was part of a large crowd. But I bet you I was the only one to attend all four.</em></p>
</blockquote>

<p>Of course, there is a host of <a href="https://pixelprivacy.com/resources/browser-fingerprinting/#Test_Your_Browsers_Fingerprinting">other factors</a> exposed by your browser that are already used for fingerprinting, meaning FLoC will likely help improve those efforts rather than hinder them. Google attracts some of the best and brightest minds around the world, and as far as "solving" research problems go, they are not a bad horse to bet on. That said, any solution they come up with will be self-serving; looking to preserve, if not boost their bottom line. There cannot be a shred of doubt that Google is an advertising company. Pushing out third-party cookies is good- of course, they are probably the latest to the party considering Firefox and Safari have been looking to do this for a good couple of years now. However, shoehorning in a proprietary tracking solution instead is a harsh reminder that their interests remain in serving targeted manipulation and making money off users rather than being the protectors and liberators that they are positioning themselves to be. </p>

<p>With Chrome's market share being what it is, it is not hard to imagine these two moves in tandem (tracking cookies OUT, FLoC IN) leading to Google further consolidating a monopoly in the online advertising market. Again, the question should not be "well, why not let Google serve me targeted ads based on purportedly less invasive tactics, instead of letting Google AND a bunch of other shady businesses serve me targeted ads based on more harmful data collection?" For us to have a realistic hope of a free and democratic internet, the question NEEDS to be "Why do we need to be tracked in whatever we do to be able to use the internet?"</p>

<p>Targeting is by nature profiling. As Big Tech enters arrangements with governments across the world and their business dealings grow murkier and less transparent, there is no telling what they will use the data they collect on you for. The same EFF article I quoted early in this post states:</p>

<blockquote>
  <p><em>The power to target is the power to discriminate. By definition, targeted ads allow advertisers to reach some kinds of people while excluding others. A targeting system may be used to decide who gets to see job postings or loan offers just as easily as it is to advertise shoes.</em></p>
</blockquote>

<p>Cathy O'Neil's book <a href="https://en.wikipedia.org/wiki/Weapons_of_Math_Destruction">"Weapons of Math Destruction: How Big Data Increases Inequality and Threatens Democracy"</a> is a great read and illuminates how the systems that collect seemingly innocuous data about our lives are weaponized against us.</p>

<p>Personally, I feel no inclination to support Google in their noble conquest to save their bottom line, so I will not be using FLoC in any way, shape, or form as long as I can resist it. Here's how you can too.</p>

<h3>Stop Using Chrome</h3>

<p>I honestly don't see the appeal that Chrome holds as a general purpose browser. Sure, it's fast enough, but so is every modern browser. <a href="https://blog.codinghorror.com/an-exercise-program-for-the-fat-web/">It's the websites that are slow</a>, and using content blockers will help address that problem no matter what browser you use. Firefox is an awesome browser, and has been since it grew out of the ashes of Netscape. Despite some of their more glaring managerial missteps of late, the browser remains pretty clean, pretty fast, and full of features. </p>

<p>Firefox ships with <a href="https://support.mozilla.org/en-US/kb/enhanced-tracking-protection-firefox-desktop">"Enhanced Tracking Protection"</a>, that while not sharp enough, does offer a modicum of protection against malicious actors online. </p>

<p>Most, if not all, Chrome WebExtensions have Firefox equivalents as well. In fact, some of the best Firefox extensions aren't offered by Chrome. <a href="https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/">Multi-Account Containers</a>, <a href="https://addons.mozilla.org/en-US/firefox/addon/temporary-containers/">Temporary Containers</a>, and <a href="https://addons.mozilla.org/en-US/firefox/addon/containerise/">Containerize</a> allow you to achieve next-level privacy gains using the principle of isolation. <a href="https://addons.mozilla.org/en-US/firefox/addon/sidebery/">Sideberry</a> or <a href="https://addons.mozilla.org/en-US/firefox/addon/tree-style-tab/">Tree-Style Tabs</a> allow productivity gains for anyone juggling a boatload of tabs. Really, what's not to like?</p>

<p>The two issues I keep hearing about Firefox are as follows:</p>

<ol>
<li><p><strong>Google services don't work well</strong>: Okay, that's possible. We've seen news of Google crippling the experience on their services for browsers other than Chrome, and they continue to serve a completely different version of their site to Firefox Android users. </p>

<p>Personally (sample size of 1), on my Linux laptop, I've consistently found Firefox to deliver a better experience on Google services. YouTube, for instance, is marginally smoother on Firefox for me. </p>

<p>Chrom(ium) has just a bit more screen tearing for 60fps videos, and toggling full-screen freezes my system for a couple of seconds on Chromium or any derivative like Brave/Vivaldi, while it works perfectly on Firefox. I'm not trying to deny or belittle anyone's experiences, but perhaps a more tenable approach would be to use the Google browser for Google services only, and/or those sites that offer a markedly inferior experience on another browser.</p></li>
<li><p><strong>Chrome DevTools are unparallelled</strong>: Chrome DevTools are great. I'm not a very heavy user (I've only been coding in Angular for a couple of months), so I haven't found many deficiencies in Firefox's DevTools either. That said, it's a matter of preference. And it's fine for you to use Chrome in a development environment if you'd like, but that is still no reason to use it as your primary browser for everything else.</p></li>
</ol>

<p>I strongly recommend incorporating Firefox into the bulk of your internet activity. It is a great browser, has a very solid <a href="https://www.mozilla.org/en-US/firefox/sync/">encrypted sync functionality</a> if you need it, and is also the only browser on Android that supports extensions. It also happens to be probably the last line of defense standing in the way of Google enjoying a controlling position for web standards forever.</p>

<p>If you really hate Firefox or it doesn't agree with your system, consider using a Chrome fork like <a href="https://brave.com/">Brave</a>. Brave blocks ads and trackers by default, is <a href="https://github.com/brave">fully open-source</a> under MPL2.0, and has even attempted to implement an alternate monetization scheme(<a href="https://basicattentiontoken.org/">1</a> <a href="https://brave.com/brave-rewards/">2</a> <a href="https://brave.com/tips/">3</a>) to keep people paid while preserving privacy. Using a chromium fork does nothing to challenge the hegemony that Google's engine has on the internet, and I'm a bit ambigious on several aspects of their project (and the fact that the browser is funded and run by Brendan Eich). However, these differentiators are a net positive. It also helps that <a href="https://brave.com/why-brave-disables-floc/">Brave have committed to not implementing FLoC</a> in their browser as well.</p>

<h3>Use Ad Blockers</h3>

<p>This is tangential to FLoC, but if you want to send a message to advertisers that their garbage content is not welcome, consider using a content blocker. There are two varieties of content blockers:</p>

<ol>
<li><p><strong>Host-Based (Domain-based) System-Wide Blocking:</strong> These block outgoing requests to ad servers and known malicious domains from your browser and all apps running on your system. You can set this up one of three ways:</p>

<ul>
<li><p><a href="https://nextdns.io/"><strong>NextDNS</strong></a> is an alternative DNS provider that you can use instead of your ISP's or Google's DNS services. In addition to stopping them from spying on your traffic (at least reducing one vector anyway), NextDNS comes equipped with a number of great blocking lists that will block ad and tracking domains. </p>

<p>Their free tier allows a generous 300,000 queries per month from unlimited devices, and the paid tier is about $2/month for unlimited requests. I have been a happy paying customer for a year, and I definitely recommend it. It is easy to set up on all your devices using their apps/programs.</p></li>
<li><p><a href="https://pi-hole.net/"><strong>PiHole</strong></a> is a nifty service that can be loaded onto a Raspberry Pi and hooked up to your home router. This way you only need to configure the device once, and any other device connecting to your WiFi will automatically reap the benefits without any extra setup.</p></li>
<li><p><strong>Hosts File</strong> is a file on your system (/etc/hosts on Linux, C:\Windows\System32\drivers\etc\hosts on Windows, and so on.) You can use publicly available lists (<a href="https://someonewhocares.org/hosts/">1</a> <a href="https://github.com/StevenBlack/hosts/blob/master/hosts">2</a>) and paste them into this file to block outgoing requests from that particular device only. It needs to be configured on every device you have, and not all of them allow it (Android devices, for example, need to be rooted to edit the hosts file.) Still, it is a good low-level solution if you don't need it to scale.</p></li>
</ul></li>
<li><p><strong>Browser-level Blocking:</strong> These are browser extensions that do host-based blocking as well as more powerful blocking such as rule-based and cosmetic filtering. The only extension you need (and the only one I recommend) is <a href="https://github.com/gorhill/uBlock">uBlock Origin</a>. It is the safest and most comprehensive of the lot. They have also added a rule that will <a href="https://github.com/uBlockOrigin/uBlock-issues/issues/1553">reject any FLoC requests</a> from websites. </p>

<p>There are several other options but I don't care for any of them. Each comes with its own issues, ranging from reports of <a href="https://www.businessinsider.com/evidon-sells-ghostery-data-to-advertisers-2013-6?IR=T">selling user data in the past</a>, to showing <a href="https://blog.wsi-emarketing.com/adblock-acceptable-ads-unacceptable-extortion/">preferential treatment to sites who paid them not to block ads on them</a>. Seriously. Stick to uBlock Origin.</p></li>
</ol>

<h3>Opt Out of FLoC</h3>

<p>You've got to love Google. They implement new standards overnight and then suddenly the onus is on you to opt-out of them. FLoC by default is enabled for every site you visit on Chrome unless the webmaster opts out of it specifically. </p>

<p>Now, if you're operating a site like mine which has no ads and/or embedded scripts that might request the cohort ID from a user's device, opting out isn't as necessary and is probably only ceremonial right now. That said, if you aren't familiar with 100% of the code embedded in your site, opting out is a good idea. If you want to send a signal to Google that their hijinks are not welcome, opting out is a good idea. If you're unlikely to see any benefit or hindrance with or without FLoC, opting out is a good idea. As of now, opting out is pretty easy. You need to send the following HTTP response header with your site.</p>

<pre class="codeblock">
Permissions-Policy: interest-cohort=()
</pre>

<p>I use Netlify, which supports two ways of adding headers. You can either use the <a href="https://docs.netlify.com/routing/headers/#syntax-for-the-netlify-configuration-file">netlify.toml</a> file, or a separate <a href="https://docs.netlify.com/routing/headers/#syntax-for-the-headers-file">_headers</a> file in your output folder. I opted for the latter. This is what my _headers file looks like (you can use most of these for your own site, since I went for privacy-respecting recommended defaults as per <a href="https://observatory.mozilla.org/">Mozilla Observatory's</a> web best practices).</p>

<pre class="codeblock">
/*
  Content-Security-Policy: default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; frame-ancestors 'none'
  Referrer-Policy: no-referrer, strict-origin-when-cross-origin
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff
  X-XSS-Protection: 1; mode=block
  Permissions-Policy: interest-cohort=() 
</pre>

<p>Paramdeo Singh has put up <a href="https://paramdeo.com/blog/opting-your-website-out-of-googles-floc-network">a very useful post</a> stating how you can add this header on a variety of hosting solutions.</p>

<h3>Conclusion: Everything sucks</h3>

<p>I don't like ads. I doubt that their purpose has, for a while (or ever), been to inform rather than to manipulate. However, the ugly truth of the modern internet is that a large portion of our use is subsidized or outright facilitated by advertising. Many of the sites we visit regularly are kept afloat only due to the ad revenue they bring in. Without this income (often the primary income for the site owner), the owners may be forced to shut down the sites that serve us such value, in pursuit of more lucrative ventures. If tomorrow the advertising industry were to blip out of existence, it is not unlikely that a huge portion of the internet will sink as well. </p>

<p>An argument can be made that the lack of financial safety nets and the need to keep squeezing money out of unsuspecting users leads to the internet and the world in general becoming perverted and commercialized. We are forced to look at things and rework them to ensure they not only make money, but also please the powers that be so that your income stream isn't disrupted due to you getting deplatformed or shadow-banned, for example. Until an alternative model for subsistence comes up, this is the sorry state of the internet we frequent daily. </p>

<p>Still, pushback against targeted advertising is needed. Contextual, non-targeted ads do work as demonstrated by DuckDuckGo and literally the entire industry before targeting and surveillance became a mainstay. We must do everything in our power to retain autonomy. If sending a signal is all that we can do, we must at least do that.</p>
]]></content:encoded>
</item>
<item>
<title>Face-Eating Leopards and Humble Pie (Signal, why?)</title>
<link>https://ronitray.xyz/posts/signal-humble-pie.html</link>
<pubDate>Wed, 07 Apr 2021</pubDate>
<description>Signal, why'd you have to go and add nonsense cryptocruft to your app?</description>
<content:encoded><![CDATA[<p>All three (a very bold estimate, probably) of my readers will know that I have been a pretty outspoken advocate for Signal as a messaging app. I've spent quite a while waxing lyrical about its security and privacy benefits, and those points still stand pretty well. Unfortunately, Signal has decided to go and add some kind of altcoin nonsense to their app. </p>

<p>Read more about this:</p>

<ol>
<li><a href="https://signal.org/blog/help-us-test-payments-in-signal/">Help Us Test Payments in Signal</a>: The official announcement.</li>
<li><a href="Signal Adds a Payments Feature—With a Privacy-Focused Cryptocurrency">Wired.com's piece on these developments</a></li>
<li><a href="https://www.stephendiehl.com/blog/signal.html">Et tu, Signal?</a>, a blog post by Stephen Diehl</li>
<li><a href="https://news.ycombinator.com/item?id=26713827">Discussion on this topic on HackerNews</a></li>
</ol>

<p>I like simple things. I like things that do one thing and do them well. I was against WhatsApp adding silly social features like Stories when they did, and I don't like the five billion extra features Telegram has. Even so, one of the least nice additions you could bring into a messaging app is payments. It should go without saying that keeping all your eggs in one basket is a bad idea- and your communications and payments are two pretty big eggs. The only way you make this worse is by also pushing cryptocurrency.</p>

<p>I'm not a fan of cryptocurrencies- admittedly, it is not something that has excited me enough to delve deeply into the subject, but I just don't see the kind of liberating, world-changing potential that advocates like bringing up whenever they talk about bitcoin and cryptocurrency in general<sup><a href="#fn-1">1</a></sup>. This means there's already a bit of an aversion to having some shiny crypto-cruft in an app I use daily. But Signal makes this worse in 3 fundamental ways:</p>

<ol>
<li>You are limited to choosing only one particular cryptocurrency for transactions.</li>
<li>This choice is not a particularly mainstream one like Bitcoin or Monero, but a relatively new player called MobileCoin. I don't particularly care for marketing speak that calls itself privacy-focused. What is more important is that this is a random altcoin no one is particularly interested in, and that it is pre-mined. The majority (reportedly &gt;85%) of mined coins are owned by the business entity that runs the day to day operations around it. The whole thing smells like a pump and dump scheme.</li>
<li>Moxie Marlinspike, the creator and lead behind Signal, just happens to be one of the earliest backers of MobileCoin, and has been associated with the project as a paid consultant for years. Conflict of interest? Sure, it could be quid pro quo, where he believes he is adding a valuable service to his application while the MoneyCoin folks promise to dump a lot of money into Signal for years to come. The question is not whether it is mutually beneficial for them, but rather whether any of these benefits trickle down to the actual end users.</li>
</ol>

<p>This new "feature" will be launched only in the UK for now, and considering India has been discussing a blanket ban on cryptocurrencies (it is currently just not considered legal tender), I may not have to encounter this for a while. What does interest and apall me in equal measure is whether this is just the first in a series of user-hostile "feature" pushes born out of economic interest or just the feeling that it might be useful.</p>

<p>Why am I posting about this? In an earlier post, I had mentioned: </p>

<blockquote>
  <p><em>See how things go, and if it seems like the service is unable to keep up even after you've given it enough chances in the near or distant future, you absolutely should consider picking alternatives, perhaps even decentralized services like XMPP or Matrix that are less likely to suffer from such issues.</em></p>
</blockquote>

<p>I suppose it was only a matter of time before they implemeted something I didn't like and I had no recourse but to get with the program if I was to continue using the app (<em>"'I never thought leopards would eat MY face,' sobs man who voted for the Leopards Eating People's Faces Party."</em>) There really wouldn't be this much buzz around this today if Signal were decentralized like Matrix/XMPP, or if they at least allowed forks or third-party clients to hit their message servers. You would then be able to use a client as minimal or as bloated as you like, with your choice of interface, features, and anti-features. As it stands, however, <a href="https://github.com/LibreSignal/LibreSignal/issues/37#issuecomment-217211165">that is not the case</a>. I am very much still locked in to Signal, having moved a large portion of my network onto it only recently. There is still not enough cause for concern, but one thing is sure: I will not allow myself to fall prey to another walled garden the next time I switch.</p>

<p>Related: Drew DeVault's post <em><a href="https://drewdevault.com/2021/04/07/The-next-chat-app.html">What Should the Next Chat App Look Like?</a></em></p>

<hr>

<p><strong>Footnotes:</strong></p>

<p id='fn-1'>
<small>
1. Basically my line of thinking is that you can't bypass ("be liberated from") governments and also require them to buy into your platform at least to the extent that they make it legal tender. Economies aren't willed into existence after closed board meetings; it's years of practice being standardized into a single definition, and that is bound to happen to any currency, crypto or otherwise. It's quite likely that to achieve any degree of ubiquity it will need to be backed by a corporation and/or multiple governments so that's no less reliance on the systems you hope to escape. If you're reliant on the powers that control the present unequal distribution of wealth and power to buy into your fancy new economy, I just feel like the moment they do, the existing power dynamic will just be ported over to the new platform. Instead of exchange rates you'll likely have spending caps and negative balances for example. Not to mention the fact that any currency reliant on mining is automatically prone to inequalities due to the instantly recognizable power dynamic between developed and developing nations. It's just that for every successful standard there are hundreds of vapourware as well, and personally I don't see the appeal to this unless it can make a case for itself in a meaningful way. So far most people I've spoken to have not been able to make a clear case for it, but that might be on me. I'm definitely open to the prospect of it in the near future, just not particularly excited.
</small>
</p>
]]></content:encoded>
</item>
<item>
<title>Don't Use Units for Line Height (Txti Please!)</title>
<link>https://ronitray.xyz/posts/line-height-units-css.html</link>
<pubDate>Thu, 25 Mar 2021</pubDate>
<description>Units are important and necessary in most CSS use cases, but not line height. Here's why.</description>
<content:encoded><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/line-height">Line height</a> is an important CSS property. I feel like either I'm getting old or the system/browser default line height is just not good enough for most modern websites. When you're reading large walls of text, single-line spacing can get pretty fatiguing quite fast. MDN specifically has an "Accessibility Concerns" section on its line-height documentation, stating:</p>

<blockquote>
  <p><i>Use a minimum value of 1.5 for line-height for main paragraph content. This will help people experiencing low vision conditions, as well as people with cognitive concerns such as Dyslexia. <b>If the page is zoomed to increase the text size, using a unitless value ensures that the line height will scale proportionately.</b></i></p>
</blockquote>

<p>The second sentence here is one that s really important. <a href="https://github.com/RonitRay/personalwebsite/commit/05f012f89fbb1b54160629b69e7e6c33d7b349d2#diff-36e64f19f57a05c8cd5b6bf7eff72703b4bbab19def7832eb4e686e7fa482eef">On early versions of this site, even early this month</a>, I had kept the line height as "1.5em". Now, relative units (em/rem) are well and good and have their place in web design. In fact, I continue to use them for setting font-size on this site, for example. And logically, there's no reason for 1.5em to not work in line spacing. It means you want the site to render lines spaced out at 1.5x whatever the system's default line spacing setting. Or at least, it should mean that, but CSS is odd. For whatever reason, the line height property doesn't seem to inherit parent values very well, which means scaling them with multipliers and relative units doesn't get you the expected results. See the example below, also from MDN:</p>

<p><img src='https://ronitray.xyz/img/cssunitcomparison.png' alt='Comparison of HTML pages using relative units and no units for line height. When no units are used, text that overflows or are longer than a single line on screen are rendered as expected with the defined line height. But when relative units are used, the line height value does not reflect, resulting in ugly vertically-conjoined text'/></p>

<p>I urge anyone writing their own CSS to remember not to use units when setting line height. In this context, it's worth mentioning txti. <a href="https://txti.es">Txti</a> is a great little service for hosting and sharing text-based pages quickly over the internet. It was created by <a href="http://barrytsmith.com/">Barry T. Smith</a>, and is a culmination of the series of motherfucking websites <a href="https://motherfuckingwebsite.com/">[1]</a> <a href="http://bettermotherfuckingwebsite.com/">[2]</a> <a href="https://thebestmotherfucking.website/">[3]</a> <a href="https://bestmotherfucking.website/">[4]</a> <a href="https://thebestmotherfuckingwebsite.co/">[5]</a>, which is both informative and hilarious.</p>

<p>Txti is great for anonymous blogs or public pastes. I love everything about it, except... it falls prey to the same line spacing issue that I did. It uses 1.5em line-spacing. Seriously, <a href="https://hn.algolia.com/?dateRange=all&amp;page=0&amp;prefix=true&amp;query=txti.es&amp;sort=byPopularity&amp;type=story">have a look at any of the txti.es posts from HN</a>. From what I gather, Txti doesn't seem to be an open-source project so I can't submit a PR. I've sent an email to Smith, but that's besides the point. What I'm trying to say is, use unitless values for line height in CSS. Cheers.</p>
]]></content:encoded>
</item>
<item>
<title>WhatsApp is Down</title>
<link>https://ronitray.xyz/posts/whatsapp-down.html</link>
<pubDate>Fri, 19 Mar 2021</pubDate>
<description>On a lighter note, some unnecessary gloating about WhatsApp being down.</description>
<content:encoded><![CDATA[<p>Almost exactly two months ago, <a href="https://ronitray.xyz/posts/signal-down.html">Signal went down</a>.</p>

<p>In my post about it, I mentioned these were likely growing pains and the platform would get more stable as they learn to deal with the new scale of their user base and as donations and support come in to help them out. I also said:</p>

<blockquote>
  <p><em>It is worth remembering that even services that are backed by some of the largest corporations in the world like WhatsApp have been down similarly less than a year ago, and have experienced scaling issues during the pandemic as more people find themselves online than ever before. This too, I must believe, shall pass.</em></p>
</blockquote>

<p>Well... WhatsApp and Instagram seem to be out worldwide now. It's not something worth celebrating, and I don't mean to gloat, but...</p>

<p><img src='https://ronitray.xyz/img/vindication.jpg' alt='picture of Captain Holt from Brooklyn Nine Nine saying VINDICATION!!!'/></p>
]]></content:encoded>
</item>
<item>
<title>How to Back Up Your Signal Conversations</title>
<link>https://ronitray.xyz/posts/signal-backup.html</link>
<pubDate>Wed, 17 Mar 2021</pubDate>
<description>You could lose your Signal conversations if you don't back them up manually. Here's how you can.</description>
<content:encoded><![CDATA[<p>Signal has established itself as one of the major encrypted messengers to stake a claim as a WhatsApp replacement of late. However, there are factors that affect usability negatively, many of which are deliberate decisions to favour privacy and security. One of these is the fact that no cloud backups are offered by the app. They want nothing to do with how you store your conversations, and would likely need a LOT more money if they had to store all your conversations themselves (a-la Telegram) or lose a lot of trust if they had to delegate the task to Google, Apple or some other provider. The result is that all conversations are stored on-device, and you need to handle the backup manually if you would like to retain them after reinstalling or changing devices. This is something they don't make clear up front, and has been a pain point for myself in the past and a number of my contacts more recently. Here's how you ensure your Signal conversations aren't lost to oblivion.</p>

<p><strong>On iOS:</strong> Apple has never, and likely will never let you get granular access to the iOS filesystem that would let you handle app data directly. This would mean you wouldn't be able to transfer your messages off iOS... with a few caveats. WhatsApp, for instance, uses iCloud to backup your messages. You can restore these on any Apple device using the same account, but there's no way to shift your messages to an Android device if you make the switch. Signal doesn't use iCloud, but they do provide the functionality to shift your messages from one iOS client to another if you are switching phones. Once you install Signal on your new device and register with your number (and PIN if you've set one), you are asked if you want to transfer your previous messages. On selecting this, a prompt appears on your old device, you scan a QR code and it initiates the transfer process. This is usually complete in a few minutes, and seems to work well enough. However, it is not of much use if you don't have access to the previous device, say if it is stolen or otherwise out of order. </p>

<p><strong>On Android:</strong> Android's process is more hands-on. Go to <em>Settings>Chats>Chat Backups</em> and pick <em>Turn On</em>. You get to pick a location where your backups are saved, and the app gives you a passphrase that you need to write down (or save in your password vault). You will be expected to use this as your second factor when attempting to restore messages from the backup. There are automatic backups every night, but the safest way to move your messages to a different device is to initiate a backup just before shifting. When you're ready, copy the backup file to the new phone, install Signal on it, and pick the <em>Restore Backup</em> option on launch. Aside from automatic backups on your phone, I recommend physically backing up your Signal database using USB or a service like Syncthing or Resilio every once in a while.</p>

<p><strong>Desktop:</strong> Signal's desktop client remains a bit of an afterthought. On the one hand it is better than WhatsApp in that it only needs to be linked to your phone once, and then is essentially independent of it and doesn't need your phone to be online to send or receive texts. On the other, it is still linked to your phone and cannot be used as a completely separate application, like Telegram Desktop/Web can. Further, it is VERY slow to start (especially if you use a mechanical hard drive instead of an SSD), and it often has issues communicating with the phone, which means both clients fetch messages independently of each other and this may cause conflicts, delays, and in rare cases even corrupted messages. The desktop client fetches messages on linking with the phone, and there is no facility to back up these messages or shift them to a different desktop client. </p>

<p>It is hard to imagine the perfect messaging app- security and privacy continue to be at loggerheads with convenience and ease-of-use. Every app developer must look long and hard at these considerations and make the tradeoffs they deem appropriate. The best you can do as a consumer is to know what you're getting into and take steps to avoid any nasty surprises. </p>
]]></content:encoded>
</item>
<item>
<title>How to Use Your Phone as a Webcam</title>
<link>https://ronitray.xyz/posts/droidcam-phone-webcam.html</link>
<pubDate>Sun, 14 Mar 2021</pubDate>
<description>You don't need a webcam. Use your Android or iOS device to get much better video and audio quality with Droidcam.</description>
<content:encoded><![CDATA[<p>I had an interview this week. Of course, the pandemic still looming over our heads meant that this was to be virtual rather than in-person. Videocalls are really not part of my workflow; I'm more of a text-oriented person. Even work-related discussion is usually limited to voice chat. The integrated webcam on my laptop was already pretty crummy, and five years of having tape on it probably didn't do the quality any favours. Not to mention the microphone, which sounds like the inside of a locomotive from the 19th century for some reason. I should probably look into that.</p>

<p>What I'm trying to say, is that I needed to set up a video call and my laptop didn't have the hardware for it. The pandemic has made prices for webcams surge by 30-100%, and I don't have the means or the inclination to participate in this inflated market. Sure, phones can handle calling pretty well, but it's still a tiny screen and the ergonomics of the whole thing are iffy. It would be better if I could somehow use my phone's rear camera and microphone as input to my PC.</p>

<p>Surprise surprise, this is possible and really easy to set up. <a href="https://github.com/dev47apps/droidcam">Droidcam</a> is a free (as in beer AND freedom) utility that does exactly this. It's available on Linux and Windows, and works with Android and iOS devices. The operation is pretty much plug and play, and you can use it over wireless LAN or USB. It takes a little tinkering to set up custom resolutions and/or audio input on Linux, but it's very minor, and the result is great quality video and somewhat acceptable audio. For some reason even premium laptops in 2021 ship with terrible webcams, so even your midrange phone likely still boasts a significantly better rear camera.</p>

<p>The video interview went through without any major hitches. Droidcam is a game changer- it opens up a lot of avenues, and for the first time I'm actually looking forward to bringing video conversations into my life. </p>
]]></content:encoded>
</item>
<item>
<title>What I'm Doing to Improve this Site's Accessibility</title>
<link>https://ronitray.xyz/posts/site-accessibility.html</link>
<pubDate>Sun, 07 Mar 2021</pubDate>
<description>Accessibility needs to be a core tenet for the internet.</description>
<content:encoded><![CDATA[<p>One of the things I've had on my mind from the very beginning for this site is accessibility. I don't expect huge viewership now or ever, but making the content accessible to as many users as possible is something I greatly value and want to achieve. The internet wasn't built for a handful of people who have perfect eyesight and gigabit internet, and I'm not going to let my site be reduced to that. Accessibility should not be a luxury or a secondary concern. It needs to be a first-class citizen of every website if we want the web to truly be the open paradise for everyone it was envisioned to be. </p>

<p>Here's what I'm doing to this end.</p>

<ol>
<li><a href="#speed">Speed</a></li>
<li><a href="#contrast">Contrast</a></li>
<li><a href="#readability">Readability</a></li>
<li><a href="#font">Font</a></li>
<li><a href="#links">Links</a></li>
<li><a href="#screenreader">Screen Reader Compliance</a></li>
<li><a href="#alttext">Alt text</a></li>
<li><a href="#nocss">CSS independence + Keyboard Navigation + Terminal-based Browser Compatibility</a></li>
<li><a href="#htmlstructure">Proper HTML Structure</a></li>
<li><a href="#forms">Forms</a></li>
</ol>

<h3 id='speed'>Speed</h3>

<p>This site is as light and fast as I've been able to make it. Static pages. &lt;1.5 KB of CSS. Zero JavaScript. The entire site is (as of today) under 250KB, and no individual page is larger than 17kB. I'm serving it through <a href="https://netlify.com">Netlify</a>, and their CDNs are more than adequate for static sites. I'm working on minimizing the footprint further, but short of plaintext served via, say, <a href="https://en.wikipedia.org/wiki/Gopher_(protocol)">gopher</a> or <a href="https://gemini.circumlunar.space/">gemini</a>, I think this is fairly light and loads quick enough even on 2G cell data.</p>

<h3 id='contrast'>Contrast</h3>

<p>I've implemented the prefers-color-scheme media query in my CSS to present a light or dark themed site based on the user's existing preference (typically read from their phone theme or desktop theme or browser flag). For light mode, it is black text on a white background. Not the most exciting thing in the world but it's as readable as can be. I've preferred dark mode in a lot of my personal applications but serving only white text on black can be pretty jarring for a lot of people, and grey text comes at the cost of reducing contrast and general readability for visually impaired users if it is the only option available. I haven't come across a convincing way to implement a dark mode toggle without JS, which is why I haven't given the explicit option. </p>

<h3 id='readability'>General Readability</h3> 

<p>On desktop, the content is centered and will cover 50% of the screen width,which translates to roughly 70-85 characters per line depending on the size of your monitor. This goes up to 90% on portrait displays (like phones) to minimize wastage of limited vertical real estate. There is just enough of a margin to ensure content doesn't overflow for phones with silly curved displays and leave room for swipe based gestures. I'm using 1.125em font size (translates to 18pt on <em>most</em> browsers by default); I think it is fairly large for those who need it without being too huge for those who don't. The site is fully zoom-compatible, so text sizes can be changed without hassle using your browser's zoom functionality. I've opted for a line height (spacing) of 1.5 as well. I don't (and won't) use all caps or justified alignment.</p>

<h3 id='font'>Font</h3>

<p>I'm sticking to sans serif fonts with high availability and generally clean typefaces. I'm also looking at slab fonts because they're the most attractive to me, but I'm not sure how legible or accessible they are in general. I wasn't able to find any definitive source on the most accessible fonts. The ones that market themselves as being specifically designed for visually impaired users tend to have the following issues.</p>

<ol>
<li>Convoluted commercial licenses, which I can't afford to use and am opposed to in general.</li>
<li>Lack of availability, as in they are unlikely to be installed on the vast majority of systems. Would need to be embedded with the site, increasing the size of each page by at least 100kb. </li>
<li>From what I understand, these also tend to be not-as-good for general use (OpenDyslexic for example seems to be difficult to read for me) or for people suffering from disabilities other than the one they target, and the data proving their efficacy is a little scarce, although that can well be attributed to the general lack of data for people with disabilities.</li>
</ol>

<h3 id='links'>Links</h3> 

<p>If you visited my site earlier this month you might recall that the text was all-black. The links were the same color as the text, with only the underline to distinguish them. I still really like the look, especially when it is done well on blogs like those maintained by <a href="https://macwright.com">Tom MacWright</a> and <a href="https://jlelse.dev">Jan-Lukas Else</a>, for instance. But with my shoddy CSSwork it just didn't look right. </p>

<ol>
<li>Data strongly also suggests that users associate blue with links because it is the default choice in HTML, and has good contrast with black or white text. It also provides another critical factor to distinguish links from the rest of the text content. I didn't like the default blue choice for HTML, so I've gone for a more mellow #0d47a1 (light mode) and #4bbaff (dark mode) instead.</li>
<li>Now, one thing I absolutely hate is underlines on links, because for letters which have descenders/tails that go below the line, the underline goes right through them and the result is really ugly. Underlines are important though, especially if your visitor isn't able to clearly distinguish your link color from the other elements. To avoid this, I've removed underlines and gone for a 1px bottom border instead, which is drawn below the descender. I think that is an acceptable compromise.</li>
</ol>

<h3 id='screenreader'>Screen Reader Compliance</h3>

<p>I've kept all formatting as basic and standard as possible, and there are no convoluted maneuvers that will interfere with screen readers. I've tested this with Microsoft Narrator and it works fine. </p>

<p>It's worth remembering that aside from images having alt tags, it is also important for your tables to have alt tags for each column as this allows the screen reader to describe the column before talking about the data in it. I've only got tables on one page (Library) right now, but that follows this already. </p>

<p>I'm using HTML5 semantic elements like header, nav, section, footer etc as well. I've also kept a lang=en on the html declaration which I've read helps screen readers parse the content.</p>

<h3 id='alttext'>Alt text on Images</h3>

<p>This is important not only for screen readers but also for people in poorly connected areas who are unable to load anything beyond the text content. It also helps years down the line if you are linking to external images that may not be there. The link may break but your alt text is there to stay.</p>

<h3 id='nocss'>CSS and Mouse Independence and Terminal Based Browsers</h3>

<p>The site looks fine without loading the CSS file. I don't rely on any fancy CSS shenanigans, mostly because I don't know or need them. I'm a big fan of terminal-based browsers, and have checked the site with links, lynx, and w3m. Looks pretty good, if I may say so. I don't hijack clicks or scrolling so users are free to navigate using their keyboard.</p>

<h3 id='htmlstructure'>Proper HTML Structure</h3>

<p>I use very basic HTML structure in my Jinja templates but adhere to all the hits: semantic elements, ordered heading tags, alt text, meta descriptions and so on.</p>

<h3 id='forms'>Forms</h3>

<p>I only have one form on this site for the contact page, and it is very basic. It is labelled and visible.</p>

<h3>Concluding</h3>

<p>If you are looking to implement accessibility features on their site can refer to <a href="https://dotcms.com/blog/post/website-accessibility-checklist-10-steps-towards-website-compliance">DotCMS's excellent accessibility checklist</a> or <a href="https://websitesetup.org/web-accessibility-checklist/">another great guide from websitesetup.org</a>.  If you have any suggestions for how I can improve accessibility, please <a href="https://ronitray.xyz/posts/contact.html">contact me.</a></p>
]]></content:encoded>
</item>
<item>
<title>How I Handle My Passwords</title>
<link>https://ronitray.xyz/posts/passwords-private.html</link>
<pubDate>Sun, 21 Feb 2021</pubDate>
<description>My only-slightly eccentric and perhaps unnecessary password workflow.</description>
<content:encoded><![CDATA[<p>This post comes in soon after <a href="https://blog.lastpass.com/2021/02/changes-to-lastpass-free/">LastPass announced</a> that they are restructuring their free tier to only allow access from one category of devices, i.e. only desktops or only mobile devices. I assume this will be a no-go for many users, and given the high (~$36/year) subscription costs, several people will be unwilling to upgrade to their premium offering.</p>

<p>If you're not using a password manager, you're just asking for trouble, and/or putting in a lot of unnecessary effort memorizing several passwords when you could just remember one. My recommendation to anyone who is starting out or looking to switch from LastPass and wants a very similar experience is the excellent <a href="https://bitwarden.com/">Bitwarden</a>, a free and open source offering that offers most of the features you would need in their free tier and also a few premium options at roughly $10 a year. It is far from the only option though, there are several very good recommendations a simple web search will get you.</p>

<h3>What Password Manager Do I Use?</h3>

<p>I've been meaning to document the slightly eccentric way I manage my passwords for a while, so here goes. My password manager of choice is <a href="https://keepassxc.org/"><strong>KeepassXC</strong></a>. What do I like about it?</p>

<ul>
<li><p>It is <strong>offline</strong>. You don't need to be connected to the internet to access your passwords or check secure notes.</p></li>
<li><p>Everything is on a <strong>single file</strong>. While an argument can be made that it is a single point of failure and if the file is corrupted you lose all your passwords, I haven't really experienced or encountered any such issues in the few years I've been following news on password managers. Having the entire database be a single file is great for portability purposes.</p></li>
<li><p>The option to use a <strong>keyfile</strong> alongside your password is great for security, and since any file can be a keyfile, it's a pretty good foil for someone who gains access to your computer by chance.</p></li>
<li><p>It is <strong>open-source</strong>, audited, and has been around for years. This is, for me, a good enough marker of trust. Further, it's not a SaaS product so even if development on one KeePass client stops tomorrow, I lose essentially nothing. I can continue using the present version of the client indefinitely, or switch to a new client without changing much because the underlying standard remains the same. </p></li>
</ul>

<h3>How Do I Store My Passwords?</h3>

<p>I have a keepass .kdbx database and a 128bit keyfile. These lie in an encrypted <a href="https://www.veracrypt.fr/en/Home.html">Veracrypt</a> container on my PC that is dismounted until I need it. </p>

<p>That would be the end of it if I only stuck to my PC, but I have a bad habit of using my phone for certain online accounts, and I also needed the security of having my passwords backed up in case my computer failed or was lost/stolen, or if I needed access to them in a pinch on some other device. Here's what I did to get around that.</p>

<p><strong>For mobile</strong>, I use <a href="https://syncthing.net/"><strong>Syncthing</strong></a>. The password database is synced over Syncthing every once in a while, either manually when I add or update a password, or periodically to be safe. The keyfile doesn't go over Syncthing, I had transferred it offline over USB. Probably unnecessary, but I did it anyway. The Android client I use is <a href="https://www.keepassdx.com/"><strong>KeePassDX</strong></a>, although <a href="https://github.com/PhilippC/keepass2android">KeePass2Android</a> is a very good option too. Both have essentially the same feature set and are open-source and reliable. They support Android's native autofill, but since this is hit and miss on my current phone (a major pain point when I used to use LastPass,and then Bitwarden), I've taken to using the <strong>virtual keyboard</strong> provided by both these apps. Essentially, when you want to login, you select the entry from your vault and load the virtual keyboard. It will then fill in whatever field you want from your vault without using the clipboard or any nasty shenanigans. Clipboard hijacking is among the easiest ways to grab someone's password, and it is a nightmare on Android since <a href="https://www.aol.com/video/view/5f024c3f3092ab5c5b6f0441/">a ton of applications have been caught snooping on clipboard contents indiscriminately in the past.</a></p>

<p><strong>Cloud</strong> backups have undeniable advantages, and the convenience factor for SaaS password vaults like LastPass, Dashlane etc is undeniable. Now, KeePass databases are encrypted using AES, so you should be good to go by just backing up said database over a cloud storage provider of your choice. Because I thrive on paranoia and I don't like making things easy for myself, I took this a step further and instead back up the veracrypt container rather than the database. This is presently done over Git but it can be replaced by pretty much any cloud storage provider. This way there are at least two layers of one of the most reliable encryption schemes we know that stand guard before my passwords. Of course, none of this matters if AES is broken in the near or distant future, but that is well outside my threat model at the moment.</p>

<p>All this takes a good while to set up at first, but once you're set, I've found that you can pretty much go about your life painlessly and without any issues. Whether you go as far as I have or further is entirely dependent upon your threat model, but at the very least I definitely recommend using a password manager for everyone, from yourself to your grandparents. I'd always say an open-source option is the way to go, but mainstream proprietary products that have been around for a while, are unlikely to suddenly disappear, and have been audited are certainly much better than using no password manager at all.</p>
]]></content:encoded>
</item>
<item>
<title>Ecstatic v0.1 Release</title>
<link>https://ronitray.xyz/posts/ecstatic-v01-release.html</link>
<pubDate>Thu, 18 Feb 2021</pubDate>
<description>Formally 'releasing' my static site generator project.</description>
<content:encoded><![CDATA[<p>Today I am formally releasing v0.1 of Ecstatic, a static site generator that I wrote in Python using the Jinja template engine.</p>

<p>This generator was initially intended only to generate this blog, but I think I've been able to make it generic enough to be extensible.</p>

<ol>
<li><a href="https://github.com/RonitRay/ecstatic/">Source on GitHub</a></li>
<li><a href="https://ronitray.xyz/posts/ecstatic-documentation.html">Documentation</a></li>
</ol>

<p><em>Please note that this is a point release and is still very much a minimal and raw project. I definitely recommend getting your hands dirty with it, but you should think twice before deploying it in a production environment where things move quickly and break fast.</em></p>
]]></content:encoded>
</item>
<item>
<title>Art and Expectation</title>
<link>https://ronitray.xyz/posts/art-expectation-taylorswift-lovestory-fearless.html</link>
<pubDate>Fri, 12 Feb 2021</pubDate>
<description>I ramble about Taylor Swift re-releasing 'Fearless' and 'Love Story'.</description>
<content:encoded><![CDATA[<p><small>CW: mentions of suicide and mental health later in the article.</small></p>

<p>Taylor Swift and I were both young when I first saw (and heard) her. I was 13, and she 21. Like many before me, my first exposure to her was her song "Love Story", part of her second studio album titled 'Fearless'. It didn't take a lot for me to be hooked; it was a really good song that spoke to my teen anxieties like few others. I had a raging crush and wasted no time in purchasing the audio CD for the entire album. </p>

<p>In the years since, I've been a fairly avid "Swiftie", indeed, that CD still lies on my shelf as one of the few pieces of physical media from my teens I still own. I must have played every album until "Red" tens of dozens of times and have many of her lyrics memorized better than more important things. I did drop out of the fandom for a while when she released "1989" and "Revolution", both albums that had a distinctly different vibe to her usual fare. They are admittedly important for her journey as a musician, but they were not, and continue to not quite be "my thing" in terms of genre. She did, however, bowl me over once again in the blink of an eye with "Folklore" and the subsequent "Evermore". It felt incredible to rediscover an artist I held so dear not so long ago, and to see how her songwriting has matured.</p>

<p>This is why I was excited, curious, and just a tad skeptical when, yesterday, she announced on Twitter that she would be re-releasing 'Fearless' later as a version more true to who she is now this year, with six tracks that didn't make the cut the first time around. She kicked this off by releasing what she calls "Taylor's Version" of Love Story earlier today. My heart pounding and my fancy headphones on, I tuned into Spotify to check it out. </p>

<p>Four minutes of anticipation, four minutes of disappointment. The song is, for all intents and purposes, basically the same as the original with a few minor tonal differences. Don't get me wrong, it's still a great song, but it rings different for me personally. This post is me thinking out loud to try and understand why this is the case, and wondering what I even expected to get out of it. For my fellow fans and those more ardent than I'll ever be, I'm not saying she shouldn't have released it or that she owes us (me) anything, really. I'm trying to articulate why I feel deeply unsettled listening to this song despite there being very few differences on the surface.</p>

<p>My personal experience with music is that the first time you discover a track playing on the radio or a streaming service of your choice is a very different experience. You almost never know the artist, and the music is all there is for you. You judge it on the way it sounds, on how it is written, how it makes you feel. Perhaps you like it. Every subsequent listen attaches new memories, new interpretations and new expectations. As you learn more about the artist and immerse yourself in their work, the way the song feels to you becomes something else entirely, more than a purely auditory experience.</p>

<p>When I first heard Fearless, I was fresh off getting my heart broken a first time, and riding the wave of hormones that is adolescence. When she recorded it around 2008, Taylor would have been a teen herself, and I felt like she "understood", that she went through a number of the same things I did and was able to express them better than I ever could. Every time I've listened to the album since, that purity, that clarity of thought, the innocence is what I'm taken back to. I'm not the same person that I was in 2010. I've seen more of life and of love than who I was back then, and I know Taylor has as well because we've been on that journey with her with every album she has released. She's not exactly an artist who creates "concept pieces", each several layers of abstraction from the real world. With her, you know her music is deeply personal, her way of processing or discussing the things she goes through in real life. So when I listen to Love Story now, while I'm taken back to a simpler, a better, more hopeful and innocent time, I'm also reminded of how far I've come since then and how the meaning of love and my expectations from it have evolved along the years. I guess I just expected her to be able to express this abstract notion the way she has expressed the myriad things I've felt over the years even when I haven't been able to do so myself.</p>

<p>If you're re-releasing a piece of music almost 15 years since you've made it, my expectation is that you'd talk about (or sing about, really) how far you've come since then, whether you see life differently or want to go back to seeing things as they were when you first released it. In essence,  I think I just expected something substantially different in this new version. Someone I adore and respect greatly, who also happens to be a fan of Taylor's, mentioned that she could be in love again and could be feeling the same way she did back then. I feel like that's a very charitable reading of the situation and the new song as it is doesn't really give me any reason to interpret it that way. Of course, it could be possible. No one knows how an artist feels better than them, and what they choose to put out and how is entirely their choice. I just feel like it could have been really interesting if she added or changed a verse or the music as a way of showing she isn't the same person anymore and has been through so much in life, but is feeling like she is in the same place once again. That would have been really special.</p>

<p>I see none of that, feel none of it, instead I hear what is mostly the same song but with a weird, intangible emptiness to it. It is the same song as from 2008, recorded in a new studio with a new, perhaps better, production team. I find myself unable to relate to this 31 year old multi-millionaire pop sensation "Taylor Swift" the same way I could relate to the 18 year old "Taylor" who I felt was just like me all those years ago. To me, it doesn't feel like it is coming from her, or from a place of genuine feeling and desire to produce art. It feels commercial, like a cover of her own song from so many years ago, or maybe even like a very popular artist covering a song from a young upstart, doing an impressive job technically but without touching its emotional core. I can't help but feel this is coming less from her than from the record label looking to cash in on the nostalgia and the adoration of her fans, many of whom have expressed delight in seeing her "return to her roots" with the last two albums, in a way. Perhaps this is cynical. It feels less like "Taylor's Version" and more like Scholastic/Bloomsbury pushing new print runs of the Harry Potter books, this time with fancy foil covers or Hogwarts house-themed binding in the hopes that people throw money at it again. Perhaps it is unfair to her, and perhaps I see capitalism as a boogeyman in every corner. Or perhaps commercialization is something that has existed in the music industry as long as the term "industry" was appended to the music. Maybe this is part and parcel of life as an artist and it is unfair to project your expectations onto an artist you like, expecting them to cater to your very specific and very unimportant ideals.</p>

<p>In the epilogue to Brandon Sanderson's "Words of Radiance", a chapter also titled "Art and Expectation", he writes:</p>

<blockquote>
  <p><em>Art...is fundamentally unfair.</em></p>
</blockquote>

<blockquote>
  <p><em>Expectation. That is the true soul of art. If you can give a man more than he expects, then he will laud you his entire life. If you can create an air of anticipation and feed it properly, you will succeed.</em></p>
</blockquote>

<blockquote>
  <p><em>Conversely, if you gain a reputation for being too good, too skilled ... beware. The better art will be in their heads, and if you give them an ounce less than they imagined, suddenly you have failed.</em></p>
</blockquote>

<p>I've discussed the way I feel about this new song with other fans and received some measure of pushback. And I get it. It <em>is</em> nitpicking. I <em>am</em> being unfair to her by expecting something she never promised in the first place, and I am perhaps being critical of something I don't deserve the right to critique. I still can't help but feel this way. The song still rings hollow to me. I can't see the same innocence and naivete in it that I did in the original, and that perhaps is more on me than it is on Taylor Swift. </p>

<p>I think long and hard before documenting my visceral reactions to music this way, because the last time I did was in 2017, soon after Linkin Park released "One More Light". Like several fans at the time, I didn't like the album. I saw firsthand as the poor reception poured out across social media, talk about how the band was a shell of its former self, how they were pushing out new music without thinking beyond their own pockets, how it was a completely different band and so on. Two months later, Chester Bennington was found dead. While a reason for his suicide has not been confirmed, I cannot help but feel that this toxic culture of entitlement I enabled and participated in to some extent could have played a part in it. I'm still very conflicted putting this post out because I don't want to be in that situation again. I might take it down later. This love is difficult, but it's real.</p>
]]></content:encoded>
</item>
<item>
<title>Reclaim Control Over Your Content Consumption with RSS Feeds</title>
<link>https://ronitray.xyz/posts/use-rss-feeds.html</link>
<pubDate>Tue, 09 Feb 2021</pubDate>
<description>RSS feeds have been around forever, and remain as relevant today as they were years ago. They might be a way out of the social dillemma, and here's how you can start using them.</description>
<content:encoded><![CDATA[<p>This is part 1 in a two-part series on RSS feeds.</p>

<p>The early internet was, I believe, truly ahead of its time. We have a lot more eye candy and fancy functionality today, that's for sure, but some of the most enduring ideas at the foundation of the internet are just a little younger than the internet itself. One of these is the RSS feed. No
matter what your site is, what content you post, or how it looks, an RSS feed is able to standardize its contents into a single XML file that can then be used to track updates, or what we have come to call "follow" you.</p>

<p>My understanding is that RSS feed usage peaked during the peak of Google Reader in the mid-2000s. It seems to have all been downhill since then. Today, RSS has a small but faithful fanbase, and though it is seeing a silent resurgence by being the backend for podcasts, it has largely been
relegated to oblivion. I feel like there are two major reasons to this. </p>

<p>The first is that RSS being simple yet flexible means it affords a great deal of control to the site owner as well as the follower over how they want to follow and consume content. You can view the entire post without leaving your feed reader, or can see a short summary and then jump straight to the site to read the rest of the post. This freedom and control is antithetical to the foundation of modern social networks, which rely heavily on addictive patterns and engaging UX shenanigans to keep you immersed and engaged on the platform for as long as possible. They need you to let them curate what you see, and to keep scrolling so they can serve you ads and make money off you. It was never about the content, or at least it hasn't been for a while and is likely never going to be
unless the economic structures underlying these systems are overhauled completely. </p>

<p>The second, less controversial reason is that the web is just a lot more diverse than it was before. It can be hard to reduce an entire website to a single feed of updates, although it really shouldn't be and this feels like a design flaw that can be remedied today itself. It is of course worth making a distinction between the "document web"- your news sites, blogs, personal websites, job listings, classifieds and so on- and the "application web"- intensive, interactive applications that aren't just read-only and typically require user input. The application web certainly has a place in the online landscape, but the document web undoubtedly deserves to be simpler to browse and access.</p>

<p>If you want to escape the social dillemma and regain control over your consumption habits, there is nothing better than RSS. Here's how you can get started.</p>

<p><strong>Picking a client</strong></p>

<p>You need a client to view RSS feeds, and there are some great options out there for any platform of your choice.</p>

<p>Cross-platform: There's a lot of cross-platform RSS services that let you follow your news and subscriptions on any device of your choosing, and even sync reading history so you are always up to date and never see any redundant information. Of these, my recommendations are <a href="https://tt-rss.org/">TinyTinyRSS</a> or <a href="https://miniflux.app/">Miniflux</a> if you can self-host, or <a href="https://theoldreader.com/">TheOldReader</a>, <a href="https://bazqux.com/">BazQux</a>, <a href="https://feedly.com/">Feedly</a>, <a href="https://www.inoreader.com/">InoReader</a> and <a href="https://www.newsblur.com/">NewsBlur</a> otherwise. All very solid services.</p>

<p>Desktop: For Windows, <a href="https://www.microsoft.com/en-us/p/newsflow/9nblggh58s5r?activetab=pivot:overviewtab">NewsFlow</a> seems to be a pretty good option. Mac users can use <a href="https://www.reederapp.com/">Reeder</a>, which is pretty popular. Linux users have quite a few options available to them. For a more traditional GUI experience, I recommend <a href="https://gitlab.com/news-flash/news_flash_gtk">NewsFlash</a>, <a href="https://lzone.de/liferea/">Liferea</a> or <a href="https://quiterss.org/">QuiteRSS</a>. However, terminal users will find a lot of value in <a href="https://newsboat.org/">newsboat</a> or <a href="https://github.com/skeeto/elfeed">elfeed</a> if you use emacs.</p>

<p>Mobile: On Android, the best reader I have found is <a href="https://play.google.com/store/apps/details?id=net.frju.flym&amp;hl=en_US&amp;gl=US">Flym</a>. <a href="https://www.reederapp.com/">Reeder</a> (linked above for MacOS) has an iOS client as well. If you're using any cross-platform service, their app/PWA is likely to be good too, and some 3rd party clients also let you hook them up to these services to sync your reading history.</p>

<p><strong>Finding RSS Feeds</strong></p>

<p>Modern RSS readers and services have search inbuilt that will let you add several sources without having to context-switch. A lot of sites you go to will put the RSS feed up front, typically in a header/footer or on the front page. However, this may not be true for quite a few sites due to the declining influence of RSS on the modern web. Fear not; all is not lost. A number of sites just have so much content that they might not put up the RSS link in a noticeable spot, or might just leave it in the source but not advertise it at all. Several websites are built on modern content management systems that all provide RSS feeds, while others still follow standard web practices and can be scraped to create feeds. It is worth trying the following:</p>

<ol>
<li>Add a /feed, or /rss, or /rss.xml or /feed.rss to the URL and see if it returns an XML file.</li>
<li>On desktop, view the source for the site's front page and Ctrl+F to search for the words "feed". "rss", or "atom".</li>
<li>For reddit, you can add a ".rss" to the URL for any subreddit to get a feed for it.</li>
<li>HackerNews RSS feeds are available at <a href="https://hnrss.org">HNRSS</a></li>
<li>Finally, you can use <a href="https://rssbox.herokuapp.com/">RSSBox</a>, <a href="https://rss.app/">rss.app</a>, or <a href="http://fetchrss.com/">FetchRSS</a> to generate feeds for a variety of sites, social networks, and other services. The likes of <a href="https://www.datorss.com/">dato.rss</a> are also pretty useful if you want to search for feeds.</li>
</ol>

<p><strong>Conclusion</strong></p>

<p>By relying on social media and big tech to curate our feeds for us, we become subservient to them, and very willing to stay within the bubbles they create for us. You can use RSS to reclaim this control, curate your own feeds, and read on your own terms. </p>

<p>PS: If you're running a site of your own, keep an eye out for my next post, where I highlight how you can add an RSS feed to your site.</p>
]]></content:encoded>
</item>
<item>
<title>Crypto- A Regret and A Request</title>
<link>https://ronitray.xyz/posts/crypto-regret-request.html</link>
<pubDate>Fri, 22 Jan 2021</pubDate>
<description>Musings on rolling your own crypto and my academic misadventures.</description>
<content:encoded><![CDATA[<p>In my second year in university as a CS major, I pitched an academic paper to an IEEE conference along with three colleagues. The paper highlighted a "novel" symmetric encryption scheme that we'd spent the better part of the summer brainstorming. It wasn't without its merits, and seemed to fulfill <a href="https://sites.google.com/site/kryptosgrapheinen/overview/objectives">the absolute basics of cryptography</a> well enough. We mostly thought of it as a toy project, and went ahead to make an encrypted chat application, where keys were generated on the initiating device and shared to the recipient via an implementation of the <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Diffie-Hellman Key Exchange</a>. At the time, everyone involved was rather excited about it, and while we didn't think of ourselves as cryptographic pioneers, having the paper accepted certainly was a matter of pride and added what we felt was some legitimacy to our efforts.</p>

<p>It took some time before my interest in security and privacy led me to realize the issues with what we had cooked up. It was slow, and lacked forward secrecy in any form whatsoever, and that was just the beginning. We hadn't yet come across the tenet that <a href="https://resources.infosecinstitute.com/topic/the-dangers-of-rolling-your-own-encryption/">you don't roll your own crypto.</a> Toy projects are fine, they're educational and can help you understand a lot of things that lectures might not. But these ideas once cemented, if encouraged unconditionally, legitimized, and not corrected, can lead to any of us deploying their own ham-fisted encryption in a production application, and that can have disastrous consequences.</p>

<p>Quoting <a href="https://www.cryptofails.com/post/75204435608/write-crypto-code-dont-publish-it">this excellent CryptoFails article</a>,</p>

<blockquote>
  <p>Donald Rumsfeld said this:</p>
</blockquote>

<blockquote>
  <blockquote>
    <p><em>There are known knowns. These are things we know that we know. There are known unknowns. That is to say, there are things that we know we don’t know. But there are also unknown unknowns. These are things that we don’t know we don’t know.</em></p>
  </blockquote>
</blockquote>

<blockquote>
  <p><em>I hypothesize that most crypto errors, especially the ones at the design level, are “unknown unknowns” to the designer.</em></p>
</blockquote>

<p>Quoting <a href="https://soatok.blog/2021/01/20/please-stop-encrypting-with-rsa-directly/">another excellent article on why RSA is a bad idea to use as a primary encryption scheme</a>,</p>

<blockquote>
  <p><em>First, consider not using RSA. Hell, while you’re at it, don’t write any cryptography code that you don’t have to.</em></p>
</blockquote>

<blockquote>
  <p><em>Libsodium (which you should use) does most of this for you, and can easily be turned into an AKE comparable to the one Signal uses. The less cryptography code you have to write, the less can go catastrophically wrong–especially in production systems.</em></p>
</blockquote>

<p>If you are an educator, a supervisor, a reviewer, please encourage students to think critically about cryptography and devise new cryptosystems for fun, but also remind them that standing on the shoulders of giants is a good thing, especially when mission-critical systems depend on it. If you're a student or someone just starting out, I point you towards the title of the Cryptofails article linked above: <em>Write Crypto Code! Don't Publish It.</em></p>
]]></content:encoded>
</item>
<item>
<title>Signal: Down, but Not Out</title>
<link>https://ronitray.xyz/posts/signal-down.html</link>
<pubDate>Sat, 16 Jan 2021</pubDate>
<description>Signal is down, should you leave? (please don't)</description>
<content:encoded><![CDATA[<p><a href="https://news.ycombinator.com/item?id=25793483">Signal services were down</a> at night (IST) on Friday, 15th January, 2021.</p>

<p>As of the time this article goes up, services remain suspended. People who have moved their entire, or a sizable portion of their networks over recently are grasping at ways to contact each other again, some falling back to greener pastures like WhatsApp, and others looking for alternatives already.</p>

<p>I'm not saying this is acceptable. I understand the criticality that often comes with instant messaging, and the problems that arise if networks suddenly collapse on you. It may well be a matter of life and death in some hopefully rare but unfortunate cases. The situation is far from ideal, but the optimist in me still believes.</p>

<p><a href="https://twitter.com/signalapp/status/1349577579091566592#m">Signal's user base grew almost 4x over just a few days this week</a>, and traffic on the app likely grew by an order of magnitude more. Growing pains are expected when dealing with problems on this scale, and I absolutely believe things will be looking up soon again. If it is a scaling issue, it may well need to be fixed just this once. As the curve of new users onboarding themselves as well as the traffic flattens (or gets less steep) over time, such issues will be fewer and further apart. </p>

<p>It is worth remembering that even services that are backed by some of the largest corporations in the world like WhatsApp <a href="https://www.independent.co.uk/life-style/gadgets-and-tech/news/whatsapp-down-not-working-app-iphone-android-ios-loading-issue-problem-a8741301.html">have been down similarly</a> less than a year ago, and have experienced scaling issues during the pandemic as more people find themselves online than ever before. This too, I must believe, shall pass.</p>

<p>This is not to say that you shouldn't keep both eyes open at all times. See how things go, and if it seems like the service is unable to keep up even after you've given it enough chances in the near or distant future, you absolutely should consider picking alternatives, perhaps even decentralized services like XMPP or Matrix that are less likely to suffer from such issues.</p>

<p>I must remind anyone reading this that Signal is not run by bloodthirsty corporations, and it does not seek to make products of its users. Signal runs on the time and effort every volunteer puts in, and the support of patrons and donors. If there is one thing you do in response to this outage, <a href="https://signal.org/donate">please let it be a gesture of support</a>.</p>

<p>This is not the time to jump back to what feels safe and familiar. We must hold strong for a better tomorrow.</p>
]]></content:encoded>
</item>
<item>
<title>GitHub Pages to Neocities, a New Home</title>
<link>https://ronitray.xyz/posts/gh-to-neocities.html</link>
<pubDate>Thu, 14 Jan 2021</pubDate>
<description>My blog has a new home now, and it's wonderful.</description>
<content:encoded><![CDATA[<p>Today, I moved this website over from GitHub Pages to Neocities. </p>

<p>There's not much to the decision, really. There are several hosting options for static sites like GH Pages, GitLab Pages, Netlify, and now even Cloudflare Pages. Anyone starting out should be more than fine picking any of these options. But here's what drew me to Neocities.</p>

<p>When you use Neocities, it is extremely evident that they are a "little guy" company that puts its values up front for everyone to see, and backs them up by making the source freely available for anyone to audit and augment. There's very little "marketing speak" because it's not really a product. When they say <em>Neocities is bringing back the fun, creativity and independence that made the web great</em>, you want to believe them, and a click on the "Websites" button in the header gives you exactly that belief.</p>

<p>It's beautiful, wild, completely chaotic and hard to believe as something one would see in 2020. No two sites look the same, and it feels like a rudimentary social network in the craziest way possible. There are glowing reviews for everyone to see on sites like Hacker News, and it is wickedly easy to get started and to set up a site. That said, surface simplicity does not mean it is in any way a shallow product or inferior to the other static hosts, at least for basic use cases. No ads or tracking anywhere to be seen, free HTTPS for all sites on the platform, and they even run a CDN with 11 datacenters. I'm not sure anyone can really ask for more, especially considering the free tier is extremely generous and will likely be more than most users need. </p>

<p>Moving my site over was really easy. I could have just used the upload options on the dashboard, but I set up a git hook and configured the site in under 5 minutes. This may not be the last destination for my site; indeed I would love to have my own domain some time in the future, but I don't have the funds or really the justification to go there yet.</p>

<p>My workflow remains almost entirely unchanged, as does the experience for any visitors to the site. But I get to keep a smug grin on my face, thinking about being a part of something that is exciting and wonderful. I'm not sure one can ask for more.</p>

<p><em>Update: As of 21st February 2021, this website is now on its own domain and no longer on Neocities. The allure of owning my own online presence was too good for me to pass up. My short stint on neocities was extremely positive and I still recommend it without any qualms to anyone who wants to host static websites for free. It remains one of my favourite projects on the internet and I wish them nothing but the best. I'm very satisfied with my hosting solution at the moment, but in a future where I can afford the $5 per month supporter fee for Neocities, I would absolutely consider retaining my custom domain and switching to them for static hosting so I can support this excellent platform.</em> </p>
]]></content:encoded>
</item>
</channel>
</rss>